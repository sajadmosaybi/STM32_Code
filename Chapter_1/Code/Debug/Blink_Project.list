
Blink_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08004cd0  08004cd0  00014cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e54  08004e54  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004e54  08004e54  00014e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e5c  08004e5c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e5c  08004e5c  00014e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e60  08004e60  00014e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004800  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004874  20004874  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016435  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030b9  00000000  00000000  000364d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001200  00000000  00000000  00039598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010a8  00000000  00000000  0003a798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ad2  00000000  00000000  0003b840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013f7d  00000000  00000000  0005e312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2404  00000000  00000000  0007228f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00144693  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d74  00000000  00000000  001446e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004cb8 	.word	0x08004cb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004cb8 	.word	0x08004cb8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004d8:	4a14      	ldr	r2, [pc, #80]	; (800052c <MX_FREERTOS_Init+0x58>)
 80004da:	2100      	movs	r1, #0
 80004dc:	4814      	ldr	r0, [pc, #80]	; (8000530 <MX_FREERTOS_Init+0x5c>)
 80004de:	f001 fdb9 	bl	8002054 <osThreadNew>
 80004e2:	4603      	mov	r3, r0
 80004e4:	4a13      	ldr	r2, [pc, #76]	; (8000534 <MX_FREERTOS_Init+0x60>)
 80004e6:	6013      	str	r3, [r2, #0]

  /* creation of Led_Blink_Task */
  Led_Blink_TaskHandle = osThreadNew(Led_Blink_Func, NULL, &Led_Blink_Task_attributes);
 80004e8:	4a13      	ldr	r2, [pc, #76]	; (8000538 <MX_FREERTOS_Init+0x64>)
 80004ea:	2100      	movs	r1, #0
 80004ec:	4813      	ldr	r0, [pc, #76]	; (800053c <MX_FREERTOS_Init+0x68>)
 80004ee:	f001 fdb1 	bl	8002054 <osThreadNew>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4a12      	ldr	r2, [pc, #72]	; (8000540 <MX_FREERTOS_Init+0x6c>)
 80004f6:	6013      	str	r3, [r2, #0]

  /* creation of Led_2_Task */
  Led_2_TaskHandle = osThreadNew(Led_2_Func, NULL, &Led_2_Task_attributes);
 80004f8:	4a12      	ldr	r2, [pc, #72]	; (8000544 <MX_FREERTOS_Init+0x70>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	4812      	ldr	r0, [pc, #72]	; (8000548 <MX_FREERTOS_Init+0x74>)
 80004fe:	f001 fda9 	bl	8002054 <osThreadNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a11      	ldr	r2, [pc, #68]	; (800054c <MX_FREERTOS_Init+0x78>)
 8000506:	6013      	str	r3, [r2, #0]

  /* creation of Led_3_Task */
  Led_3_TaskHandle = osThreadNew(Led_3_Func, NULL, &Led_3_Task_attributes);
 8000508:	4a11      	ldr	r2, [pc, #68]	; (8000550 <MX_FREERTOS_Init+0x7c>)
 800050a:	2100      	movs	r1, #0
 800050c:	4811      	ldr	r0, [pc, #68]	; (8000554 <MX_FREERTOS_Init+0x80>)
 800050e:	f001 fda1 	bl	8002054 <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a10      	ldr	r2, [pc, #64]	; (8000558 <MX_FREERTOS_Init+0x84>)
 8000516:	6013      	str	r3, [r2, #0]

  /* creation of Timer_Task */
  Timer_TaskHandle = osThreadNew(Timer_Func, NULL, &Timer_Task_attributes);
 8000518:	4a10      	ldr	r2, [pc, #64]	; (800055c <MX_FREERTOS_Init+0x88>)
 800051a:	2100      	movs	r1, #0
 800051c:	4810      	ldr	r0, [pc, #64]	; (8000560 <MX_FREERTOS_Init+0x8c>)
 800051e:	f001 fd99 	bl	8002054 <osThreadNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a0f      	ldr	r2, [pc, #60]	; (8000564 <MX_FREERTOS_Init+0x90>)
 8000526:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	08004d28 	.word	0x08004d28
 8000530:	08000569 	.word	0x08000569
 8000534:	20000094 	.word	0x20000094
 8000538:	08004d4c 	.word	0x08004d4c
 800053c:	08000579 	.word	0x08000579
 8000540:	20000098 	.word	0x20000098
 8000544:	08004d70 	.word	0x08004d70
 8000548:	080005a5 	.word	0x080005a5
 800054c:	2000009c 	.word	0x2000009c
 8000550:	08004d94 	.word	0x08004d94
 8000554:	080005c5 	.word	0x080005c5
 8000558:	200000a0 	.word	0x200000a0
 800055c:	08004db8 	.word	0x08004db8
 8000560:	080005e5 	.word	0x080005e5
 8000564:	200000a4 	.word	0x200000a4

08000568 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000570:	2001      	movs	r0, #1
 8000572:	f001 fe01 	bl	8002178 <osDelay>
 8000576:	e7fb      	b.n	8000570 <StartDefaultTask+0x8>

08000578 <Led_Blink_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Led_Blink_Func */
void Led_Blink_Func(void *argument)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Led_Blink_Func */
  /* Infinite loop */
  for(;;)
  {
		if (Timer.Timer_Flag == true) {
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <Led_Blink_Func+0x24>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d0fb      	beq.n	8000580 <Led_Blink_Func+0x8>
			HAL_GPIO_TogglePin(Led_1_GPIO_Port, Led_1_Pin);
 8000588:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058c:	4804      	ldr	r0, [pc, #16]	; (80005a0 <Led_Blink_Func+0x28>)
 800058e:	f000 fd6e 	bl	800106e <HAL_GPIO_TogglePin>
			osDelay(100);
 8000592:	2064      	movs	r0, #100	; 0x64
 8000594:	f001 fdf0 	bl	8002178 <osDelay>
		if (Timer.Timer_Flag == true) {
 8000598:	e7f2      	b.n	8000580 <Led_Blink_Func+0x8>
 800059a:	bf00      	nop
 800059c:	20000090 	.word	0x20000090
 80005a0:	40020800 	.word	0x40020800

080005a4 <Led_2_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Led_2_Func */
void Led_2_Func(void *argument)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Led_2_Func */
  /* Infinite loop */
  for(;;)
  {
		HAL_GPIO_TogglePin(Led_2_GPIO_Port, Led_2_Pin);
 80005ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <Led_2_Func+0x1c>)
 80005b2:	f000 fd5c 	bl	800106e <HAL_GPIO_TogglePin>
		osDelay(280);
 80005b6:	f44f 708c 	mov.w	r0, #280	; 0x118
 80005ba:	f001 fddd 	bl	8002178 <osDelay>
		HAL_GPIO_TogglePin(Led_2_GPIO_Port, Led_2_Pin);
 80005be:	e7f5      	b.n	80005ac <Led_2_Func+0x8>
 80005c0:	40020800 	.word	0x40020800

080005c4 <Led_3_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Led_3_Func */
void Led_3_Func(void *argument)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Led_3_Func */
  /* Infinite loop */
  for(;;)
  {
		HAL_GPIO_TogglePin(Led_3_GPIO_Port, Led_3_Pin);
 80005cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <Led_3_Func+0x1c>)
 80005d2:	f000 fd4c 	bl	800106e <HAL_GPIO_TogglePin>
		osDelay(170);
 80005d6:	20aa      	movs	r0, #170	; 0xaa
 80005d8:	f001 fdce 	bl	8002178 <osDelay>
		HAL_GPIO_TogglePin(Led_3_GPIO_Port, Led_3_Pin);
 80005dc:	e7f6      	b.n	80005cc <Led_3_Func+0x8>
 80005de:	bf00      	nop
 80005e0:	40020800 	.word	0x40020800

080005e4 <Timer_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Timer_Func */
void Timer_Func(void *argument)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Timer_Func */
  /* Infinite loop */
  for(;;)
  {
		if (Timer.cnt > 10) {
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <Timer_Func+0x2c>)
 80005ee:	785b      	ldrb	r3, [r3, #1]
 80005f0:	2b0a      	cmp	r3, #10
 80005f2:	d908      	bls.n	8000606 <Timer_Func+0x22>
			Timer.Timer_Flag = true;
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <Timer_Func+0x2c>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	701a      	strb	r2, [r3, #0]
			Timer.cnt = 0;
 80005fa:	4b05      	ldr	r3, [pc, #20]	; (8000610 <Timer_Func+0x2c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	705a      	strb	r2, [r3, #1]
			HAL_TIM_Base_Stop_IT(&htim13);
 8000600:	4804      	ldr	r0, [pc, #16]	; (8000614 <Timer_Func+0x30>)
 8000602:	f001 fa85 	bl	8001b10 <HAL_TIM_Base_Stop_IT>
		}
    osDelay(1);
 8000606:	2001      	movs	r0, #1
 8000608:	f001 fdb6 	bl	8002178 <osDelay>
		if (Timer.cnt > 10) {
 800060c:	e7ee      	b.n	80005ec <Timer_Func+0x8>
 800060e:	bf00      	nop
 8000610:	20000090 	.word	0x20000090
 8000614:	200000f0 	.word	0x200000f0

08000618 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <MX_GPIO_Init+0x9c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a1f      	ldr	r2, [pc, #124]	; (80006b4 <MX_GPIO_Init+0x9c>)
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <MX_GPIO_Init+0x9c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0304 	and.w	r3, r3, #4
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <MX_GPIO_Init+0x9c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a18      	ldr	r2, [pc, #96]	; (80006b4 <MX_GPIO_Init+0x9c>)
 8000654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <MX_GPIO_Init+0x9c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_GPIO_Init+0x9c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a11      	ldr	r2, [pc, #68]	; (80006b4 <MX_GPIO_Init+0x9c>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_GPIO_Init+0x9c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Led_1_Pin|Led_2_Pin|Led_3_Pin, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000688:	480b      	ldr	r0, [pc, #44]	; (80006b8 <MX_GPIO_Init+0xa0>)
 800068a:	f000 fcd7 	bl	800103c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Led_1_Pin|Led_2_Pin|Led_3_Pin;
 800068e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000692:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	4619      	mov	r1, r3
 80006a6:	4804      	ldr	r0, [pc, #16]	; (80006b8 <MX_GPIO_Init+0xa0>)
 80006a8:	f000 fb2c 	bl	8000d04 <HAL_GPIO_Init>

}
 80006ac:	bf00      	nop
 80006ae:	3720      	adds	r7, #32
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40020800 	.word	0x40020800

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c0:	f000 f9fc 	bl	8000abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c4:	f000 f810 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c8:	f7ff ffa6 	bl	8000618 <MX_GPIO_Init>
  MX_TIM13_Init();
 80006cc:	f000 f980 	bl	80009d0 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim13);
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <main+0x28>)
 80006d2:	f001 f9ad 	bl	8001a30 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80006d6:	f001 fc73 	bl	8001fc0 <osKernelInitialize>
  MX_FREERTOS_Init();
 80006da:	f7ff fefb 	bl	80004d4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80006de:	f001 fc93 	bl	8002008 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <main+0x26>
 80006e4:	200000f0 	.word	0x200000f0

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b094      	sub	sp, #80	; 0x50
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	2230      	movs	r2, #48	; 0x30
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f004 fa14 	bl	8004b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	4b28      	ldr	r3, [pc, #160]	; (80007b4 <SystemClock_Config+0xcc>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	4a27      	ldr	r2, [pc, #156]	; (80007b4 <SystemClock_Config+0xcc>)
 8000716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071a:	6413      	str	r3, [r2, #64]	; 0x40
 800071c:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <SystemClock_Config+0xcc>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000728:	2300      	movs	r3, #0
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <SystemClock_Config+0xd0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a21      	ldr	r2, [pc, #132]	; (80007b8 <SystemClock_Config+0xd0>)
 8000732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000736:	6013      	str	r3, [r2, #0]
 8000738:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <SystemClock_Config+0xd0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000744:	2301      	movs	r3, #1
 8000746:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000748:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074e:	2302      	movs	r3, #2
 8000750:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000752:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000756:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000758:	2319      	movs	r3, #25
 800075a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800075c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000760:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000762:	2302      	movs	r3, #2
 8000764:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000766:	2304      	movs	r3, #4
 8000768:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	4618      	mov	r0, r3
 8000770:	f000 fc98 	bl	80010a4 <HAL_RCC_OscConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800077a:	f000 f83f 	bl	80007fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077e:	230f      	movs	r3, #15
 8000780:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000782:	2302      	movs	r3, #2
 8000784:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800078a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800078e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000794:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	2105      	movs	r1, #5
 800079c:	4618      	mov	r0, r3
 800079e:	f000 fef9 	bl	8001594 <HAL_RCC_ClockConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007a8:	f000 f828 	bl	80007fc <Error_Handler>
  }
}
 80007ac:	bf00      	nop
 80007ae:	3750      	adds	r7, #80	; 0x50
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40007000 	.word	0x40007000

080007bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a09      	ldr	r2, [pc, #36]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d101      	bne.n	80007d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ce:	f000 f997 	bl	8000b00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM13) {
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d105      	bne.n	80007e8 <HAL_TIM_PeriodElapsedCallback+0x2c>
	  Timer.cnt++;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80007de:	785b      	ldrb	r3, [r3, #1]
 80007e0:	3301      	adds	r3, #1
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80007e6:	705a      	strb	r2, [r3, #1]
}
  /* USER CODE END Callback 1 */
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40002000 	.word	0x40002000
 80007f4:	40001c00 	.word	0x40001c00
 80007f8:	20000090 	.word	0x20000090

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000804:	e7fe      	b.n	8000804 <Error_Handler+0x8>
	...

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_MspInit+0x54>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	4a11      	ldr	r2, [pc, #68]	; (800085c <HAL_MspInit+0x54>)
 8000818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081c:	6453      	str	r3, [r2, #68]	; 0x44
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <HAL_MspInit+0x54>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <HAL_MspInit+0x54>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <HAL_MspInit+0x54>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000838:	6413      	str	r3, [r2, #64]	; 0x40
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <HAL_MspInit+0x54>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	210f      	movs	r1, #15
 800084a:	f06f 0001 	mvn.w	r0, #1
 800084e:	f000 fa2f 	bl	8000cb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800

08000860 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08e      	sub	sp, #56	; 0x38
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000868:	2300      	movs	r3, #0
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800086c:	2300      	movs	r3, #0
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	4b33      	ldr	r3, [pc, #204]	; (8000944 <HAL_InitTick+0xe4>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	4a32      	ldr	r2, [pc, #200]	; (8000944 <HAL_InitTick+0xe4>)
 800087a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800087e:	6413      	str	r3, [r2, #64]	; 0x40
 8000880:	4b30      	ldr	r3, [pc, #192]	; (8000944 <HAL_InitTick+0xe4>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800088c:	f107 0210 	add.w	r2, r7, #16
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4611      	mov	r1, r2
 8000896:	4618      	mov	r0, r3
 8000898:	f001 f848 	bl	800192c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800089c:	6a3b      	ldr	r3, [r7, #32]
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d103      	bne.n	80008ae <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008a6:	f001 f82d 	bl	8001904 <HAL_RCC_GetPCLK1Freq>
 80008aa:	6378      	str	r0, [r7, #52]	; 0x34
 80008ac:	e004      	b.n	80008b8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008ae:	f001 f829 	bl	8001904 <HAL_RCC_GetPCLK1Freq>
 80008b2:	4603      	mov	r3, r0
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ba:	4a23      	ldr	r2, [pc, #140]	; (8000948 <HAL_InitTick+0xe8>)
 80008bc:	fba2 2303 	umull	r2, r3, r2, r3
 80008c0:	0c9b      	lsrs	r3, r3, #18
 80008c2:	3b01      	subs	r3, #1
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80008c6:	4b21      	ldr	r3, [pc, #132]	; (800094c <HAL_InitTick+0xec>)
 80008c8:	4a21      	ldr	r2, [pc, #132]	; (8000950 <HAL_InitTick+0xf0>)
 80008ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80008cc:	4b1f      	ldr	r3, [pc, #124]	; (800094c <HAL_InitTick+0xec>)
 80008ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008d2:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80008d4:	4a1d      	ldr	r2, [pc, #116]	; (800094c <HAL_InitTick+0xec>)
 80008d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d8:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80008da:	4b1c      	ldr	r3, [pc, #112]	; (800094c <HAL_InitTick+0xec>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e0:	4b1a      	ldr	r3, [pc, #104]	; (800094c <HAL_InitTick+0xec>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <HAL_InitTick+0xec>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80008ec:	4817      	ldr	r0, [pc, #92]	; (800094c <HAL_InitTick+0xec>)
 80008ee:	f001 f84f 	bl	8001990 <HAL_TIM_Base_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80008f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d11b      	bne.n	8000938 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000900:	4812      	ldr	r0, [pc, #72]	; (800094c <HAL_InitTick+0xec>)
 8000902:	f001 f895 	bl	8001a30 <HAL_TIM_Base_Start_IT>
 8000906:	4603      	mov	r3, r0
 8000908:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800090c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000910:	2b00      	cmp	r3, #0
 8000912:	d111      	bne.n	8000938 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000914:	202d      	movs	r0, #45	; 0x2d
 8000916:	f000 f9e7 	bl	8000ce8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2b0f      	cmp	r3, #15
 800091e:	d808      	bhi.n	8000932 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000920:	2200      	movs	r2, #0
 8000922:	6879      	ldr	r1, [r7, #4]
 8000924:	202d      	movs	r0, #45	; 0x2d
 8000926:	f000 f9c3 	bl	8000cb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800092a:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <HAL_InitTick+0xf4>)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6013      	str	r3, [r2, #0]
 8000930:	e002      	b.n	8000938 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000938:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800093c:	4618      	mov	r0, r3
 800093e:	3738      	adds	r7, #56	; 0x38
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40023800 	.word	0x40023800
 8000948:	431bde83 	.word	0x431bde83
 800094c:	200000a8 	.word	0x200000a8
 8000950:	40002000 	.word	0x40002000
 8000954:	20000004 	.word	0x20000004

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800095c:	e7fe      	b.n	800095c <NMI_Handler+0x4>

0800095e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <HardFault_Handler+0x4>

08000964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <MemManage_Handler+0x4>

0800096a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <BusFault_Handler+0x4>

08000970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <UsageFault_Handler+0x4>

08000976 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8000988:	4802      	ldr	r0, [pc, #8]	; (8000994 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800098a:	f001 f8f0 	bl	8001b6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200000f0 	.word	0x200000f0

08000998 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800099e:	f001 f8e6 	bl	8001b6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000a8 	.word	0x200000a8

080009ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <SystemInit+0x20>)
 80009b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b6:	4a05      	ldr	r2, [pc, #20]	; (80009cc <SystemInit+0x20>)
 80009b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <MX_TIM13_Init>:

TIM_HandleTypeDef htim13;

/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_TIM13_Init+0x40>)
 80009d6:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <MX_TIM13_Init+0x44>)
 80009d8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 16800;
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <MX_TIM13_Init+0x40>)
 80009dc:	f244 12a0 	movw	r2, #16800	; 0x41a0
 80009e0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_TIM13_Init+0x40>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_TIM13_Init+0x40>)
 80009ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80009ee:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <MX_TIM13_Init+0x40>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_TIM13_Init+0x40>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_TIM13_Init+0x40>)
 80009fe:	f000 ffc7 	bl	8001990 <HAL_TIM_Base_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8000a08:	f7ff fef8 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	200000f0 	.word	0x200000f0
 8000a14:	40001c00 	.word	0x40001c00

08000a18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <HAL_TIM_Base_MspInit+0x48>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d115      	bne.n	8000a56 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <HAL_TIM_Base_MspInit+0x4c>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	4a0c      	ldr	r2, [pc, #48]	; (8000a64 <HAL_TIM_Base_MspInit+0x4c>)
 8000a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a38:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <HAL_TIM_Base_MspInit+0x4c>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2105      	movs	r1, #5
 8000a4a:	202c      	movs	r0, #44	; 0x2c
 8000a4c:	f000 f930 	bl	8000cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000a50:	202c      	movs	r0, #44	; 0x2c
 8000a52:	f000 f949 	bl	8000ce8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40001c00 	.word	0x40001c00
 8000a64:	40023800 	.word	0x40023800

08000a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a6c:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a6e:	490e      	ldr	r1, [pc, #56]	; (8000aa8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a70:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a74:	e002      	b.n	8000a7c <LoopCopyDataInit>

08000a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7a:	3304      	adds	r3, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a80:	d3f9      	bcc.n	8000a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a82:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a84:	4c0b      	ldr	r4, [pc, #44]	; (8000ab4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a88:	e001      	b.n	8000a8e <LoopFillZerobss>

08000a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a8c:	3204      	adds	r2, #4

08000a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a90:	d3fb      	bcc.n	8000a8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a92:	f7ff ff8b 	bl	80009ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a96:	f004 f811 	bl	8004abc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a9a:	f7ff fe0f 	bl	80006bc <main>
  bx  lr    
 8000a9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000aa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000aac:	08004e64 	.word	0x08004e64
  ldr r2, =_sbss
 8000ab0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ab4:	20004874 	.word	0x20004874

08000ab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC_IRQHandler>
	...

08000abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <HAL_Init+0x40>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <HAL_Init+0x40>)
 8000ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000acc:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <HAL_Init+0x40>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <HAL_Init+0x40>)
 8000ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ad6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <HAL_Init+0x40>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a07      	ldr	r2, [pc, #28]	; (8000afc <HAL_Init+0x40>)
 8000ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae4:	2003      	movs	r0, #3
 8000ae6:	f000 f8d8 	bl	8000c9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aea:	200f      	movs	r0, #15
 8000aec:	f7ff feb8 	bl	8000860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af0:	f7ff fe8a 	bl	8000808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023c00 	.word	0x40023c00

08000b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_IncTick+0x20>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_IncTick+0x24>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <HAL_IncTick+0x24>)
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000008 	.word	0x20000008
 8000b24:	20000138 	.word	0x20000138

08000b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <HAL_GetTick+0x14>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000138 	.word	0x20000138

08000b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b72:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	60d3      	str	r3, [r2, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	0a1b      	lsrs	r3, r3, #8
 8000b92:	f003 0307 	and.w	r3, r3, #7
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	db0b      	blt.n	8000bce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	f003 021f 	and.w	r2, r3, #31
 8000bbc:	4907      	ldr	r1, [pc, #28]	; (8000bdc <__NVIC_EnableIRQ+0x38>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	095b      	lsrs	r3, r3, #5
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000e100 	.word	0xe000e100

08000be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db0a      	blt.n	8000c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	490c      	ldr	r1, [pc, #48]	; (8000c2c <__NVIC_SetPriority+0x4c>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	0112      	lsls	r2, r2, #4
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	440b      	add	r3, r1
 8000c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c08:	e00a      	b.n	8000c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4908      	ldr	r1, [pc, #32]	; (8000c30 <__NVIC_SetPriority+0x50>)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	f003 030f 	and.w	r3, r3, #15
 8000c16:	3b04      	subs	r3, #4
 8000c18:	0112      	lsls	r2, r2, #4
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	761a      	strb	r2, [r3, #24]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000e100 	.word	0xe000e100
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	; 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f1c3 0307 	rsb	r3, r3, #7
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	bf28      	it	cs
 8000c52:	2304      	movcs	r3, #4
 8000c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	2b06      	cmp	r3, #6
 8000c5c:	d902      	bls.n	8000c64 <NVIC_EncodePriority+0x30>
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3b03      	subs	r3, #3
 8000c62:	e000      	b.n	8000c66 <NVIC_EncodePriority+0x32>
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43da      	mvns	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	43d9      	mvns	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	4313      	orrs	r3, r2
         );
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3724      	adds	r7, #36	; 0x24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff ff4c 	bl	8000b40 <__NVIC_SetPriorityGrouping>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
 8000cbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc2:	f7ff ff61 	bl	8000b88 <__NVIC_GetPriorityGrouping>
 8000cc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	68b9      	ldr	r1, [r7, #8]
 8000ccc:	6978      	ldr	r0, [r7, #20]
 8000cce:	f7ff ffb1 	bl	8000c34 <NVIC_EncodePriority>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd8:	4611      	mov	r1, r2
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff80 	bl	8000be0 <__NVIC_SetPriority>
}
 8000ce0:	bf00      	nop
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff ff54 	bl	8000ba4 <__NVIC_EnableIRQ>
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
 8000d1e:	e16b      	b.n	8000ff8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d20:	2201      	movs	r2, #1
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	f040 815a 	bne.w	8000ff2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 0303 	and.w	r3, r3, #3
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d005      	beq.n	8000d56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d130      	bne.n	8000db8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	2203      	movs	r2, #3
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	091b      	lsrs	r3, r3, #4
 8000da2:	f003 0201 	and.w	r2, r3, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d017      	beq.n	8000df4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d123      	bne.n	8000e48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	08da      	lsrs	r2, r3, #3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3208      	adds	r2, #8
 8000e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	f003 0307 	and.w	r3, r3, #7
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	220f      	movs	r2, #15
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	691a      	ldr	r2, [r3, #16]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	08da      	lsrs	r2, r3, #3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3208      	adds	r2, #8
 8000e42:	69b9      	ldr	r1, [r7, #24]
 8000e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0203 	and.w	r2, r3, #3
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 80b4 	beq.w	8000ff2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b60      	ldr	r3, [pc, #384]	; (8001010 <HAL_GPIO_Init+0x30c>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	4a5f      	ldr	r2, [pc, #380]	; (8001010 <HAL_GPIO_Init+0x30c>)
 8000e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e98:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9a:	4b5d      	ldr	r3, [pc, #372]	; (8001010 <HAL_GPIO_Init+0x30c>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ea6:	4a5b      	ldr	r2, [pc, #364]	; (8001014 <HAL_GPIO_Init+0x310>)
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	089b      	lsrs	r3, r3, #2
 8000eac:	3302      	adds	r3, #2
 8000eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	220f      	movs	r2, #15
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a52      	ldr	r2, [pc, #328]	; (8001018 <HAL_GPIO_Init+0x314>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d02b      	beq.n	8000f2a <HAL_GPIO_Init+0x226>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a51      	ldr	r2, [pc, #324]	; (800101c <HAL_GPIO_Init+0x318>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d025      	beq.n	8000f26 <HAL_GPIO_Init+0x222>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a50      	ldr	r2, [pc, #320]	; (8001020 <HAL_GPIO_Init+0x31c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d01f      	beq.n	8000f22 <HAL_GPIO_Init+0x21e>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a4f      	ldr	r2, [pc, #316]	; (8001024 <HAL_GPIO_Init+0x320>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d019      	beq.n	8000f1e <HAL_GPIO_Init+0x21a>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4e      	ldr	r2, [pc, #312]	; (8001028 <HAL_GPIO_Init+0x324>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d013      	beq.n	8000f1a <HAL_GPIO_Init+0x216>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a4d      	ldr	r2, [pc, #308]	; (800102c <HAL_GPIO_Init+0x328>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d00d      	beq.n	8000f16 <HAL_GPIO_Init+0x212>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4c      	ldr	r2, [pc, #304]	; (8001030 <HAL_GPIO_Init+0x32c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d007      	beq.n	8000f12 <HAL_GPIO_Init+0x20e>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4b      	ldr	r2, [pc, #300]	; (8001034 <HAL_GPIO_Init+0x330>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d101      	bne.n	8000f0e <HAL_GPIO_Init+0x20a>
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	e00e      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f0e:	2308      	movs	r3, #8
 8000f10:	e00c      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f12:	2306      	movs	r3, #6
 8000f14:	e00a      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f16:	2305      	movs	r3, #5
 8000f18:	e008      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	e006      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e004      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f22:	2302      	movs	r3, #2
 8000f24:	e002      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f26:	2301      	movs	r3, #1
 8000f28:	e000      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	69fa      	ldr	r2, [r7, #28]
 8000f2e:	f002 0203 	and.w	r2, r2, #3
 8000f32:	0092      	lsls	r2, r2, #2
 8000f34:	4093      	lsls	r3, r2
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f3c:	4935      	ldr	r1, [pc, #212]	; (8001014 <HAL_GPIO_Init+0x310>)
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	089b      	lsrs	r3, r3, #2
 8000f42:	3302      	adds	r3, #2
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f4a:	4b3b      	ldr	r3, [pc, #236]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f6e:	4a32      	ldr	r2, [pc, #200]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f74:	4b30      	ldr	r3, [pc, #192]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f98:	4a27      	ldr	r2, [pc, #156]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f9e:	4b26      	ldr	r3, [pc, #152]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fc2:	4a1d      	ldr	r2, [pc, #116]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fec:	4a12      	ldr	r2, [pc, #72]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	2b0f      	cmp	r3, #15
 8000ffc:	f67f ae90 	bls.w	8000d20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40013800 	.word	0x40013800
 8001018:	40020000 	.word	0x40020000
 800101c:	40020400 	.word	0x40020400
 8001020:	40020800 	.word	0x40020800
 8001024:	40020c00 	.word	0x40020c00
 8001028:	40021000 	.word	0x40021000
 800102c:	40021400 	.word	0x40021400
 8001030:	40021800 	.word	0x40021800
 8001034:	40021c00 	.word	0x40021c00
 8001038:	40013c00 	.word	0x40013c00

0800103c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
 8001048:	4613      	mov	r3, r2
 800104a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800104c:	787b      	ldrb	r3, [r7, #1]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001052:	887a      	ldrh	r2, [r7, #2]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001058:	e003      	b.n	8001062 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800105a:	887b      	ldrh	r3, [r7, #2]
 800105c:	041a      	lsls	r2, r3, #16
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	619a      	str	r2, [r3, #24]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800106e:	b480      	push	{r7}
 8001070:	b085      	sub	sp, #20
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	460b      	mov	r3, r1
 8001078:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001080:	887a      	ldrh	r2, [r7, #2]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4013      	ands	r3, r2
 8001086:	041a      	lsls	r2, r3, #16
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	43d9      	mvns	r1, r3
 800108c:	887b      	ldrh	r3, [r7, #2]
 800108e:	400b      	ands	r3, r1
 8001090:	431a      	orrs	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	619a      	str	r2, [r3, #24]
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e267      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d075      	beq.n	80011ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010c2:	4b88      	ldr	r3, [pc, #544]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 030c 	and.w	r3, r3, #12
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	d00c      	beq.n	80010e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ce:	4b85      	ldr	r3, [pc, #532]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d112      	bne.n	8001100 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010da:	4b82      	ldr	r3, [pc, #520]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010e6:	d10b      	bne.n	8001100 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e8:	4b7e      	ldr	r3, [pc, #504]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d05b      	beq.n	80011ac <HAL_RCC_OscConfig+0x108>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d157      	bne.n	80011ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e242      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001108:	d106      	bne.n	8001118 <HAL_RCC_OscConfig+0x74>
 800110a:	4b76      	ldr	r3, [pc, #472]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a75      	ldr	r2, [pc, #468]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e01d      	b.n	8001154 <HAL_RCC_OscConfig+0xb0>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001120:	d10c      	bne.n	800113c <HAL_RCC_OscConfig+0x98>
 8001122:	4b70      	ldr	r3, [pc, #448]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a6f      	ldr	r2, [pc, #444]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	4b6d      	ldr	r3, [pc, #436]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a6c      	ldr	r2, [pc, #432]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	e00b      	b.n	8001154 <HAL_RCC_OscConfig+0xb0>
 800113c:	4b69      	ldr	r3, [pc, #420]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a68      	ldr	r2, [pc, #416]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4b66      	ldr	r3, [pc, #408]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a65      	ldr	r2, [pc, #404]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 800114e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d013      	beq.n	8001184 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115c:	f7ff fce4 	bl	8000b28 <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001164:	f7ff fce0 	bl	8000b28 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b64      	cmp	r3, #100	; 0x64
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e207      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001176:	4b5b      	ldr	r3, [pc, #364]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0f0      	beq.n	8001164 <HAL_RCC_OscConfig+0xc0>
 8001182:	e014      	b.n	80011ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001184:	f7ff fcd0 	bl	8000b28 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800118c:	f7ff fccc 	bl	8000b28 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b64      	cmp	r3, #100	; 0x64
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e1f3      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800119e:	4b51      	ldr	r3, [pc, #324]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f0      	bne.n	800118c <HAL_RCC_OscConfig+0xe8>
 80011aa:	e000      	b.n	80011ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d063      	beq.n	8001282 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ba:	4b4a      	ldr	r3, [pc, #296]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 030c 	and.w	r3, r3, #12
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00b      	beq.n	80011de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011c6:	4b47      	ldr	r3, [pc, #284]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d11c      	bne.n	800120c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011d2:	4b44      	ldr	r3, [pc, #272]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d116      	bne.n	800120c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011de:	4b41      	ldr	r3, [pc, #260]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d005      	beq.n	80011f6 <HAL_RCC_OscConfig+0x152>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d001      	beq.n	80011f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e1c7      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f6:	4b3b      	ldr	r3, [pc, #236]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	4937      	ldr	r1, [pc, #220]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001206:	4313      	orrs	r3, r2
 8001208:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120a:	e03a      	b.n	8001282 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d020      	beq.n	8001256 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001214:	4b34      	ldr	r3, [pc, #208]	; (80012e8 <HAL_RCC_OscConfig+0x244>)
 8001216:	2201      	movs	r2, #1
 8001218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121a:	f7ff fc85 	bl	8000b28 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001222:	f7ff fc81 	bl	8000b28 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e1a8      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001234:	4b2b      	ldr	r3, [pc, #172]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0f0      	beq.n	8001222 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001240:	4b28      	ldr	r3, [pc, #160]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	4925      	ldr	r1, [pc, #148]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001250:	4313      	orrs	r3, r2
 8001252:	600b      	str	r3, [r1, #0]
 8001254:	e015      	b.n	8001282 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001256:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <HAL_RCC_OscConfig+0x244>)
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125c:	f7ff fc64 	bl	8000b28 <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001264:	f7ff fc60 	bl	8000b28 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e187      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001276:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1f0      	bne.n	8001264 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	2b00      	cmp	r3, #0
 800128c:	d036      	beq.n	80012fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d016      	beq.n	80012c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <HAL_RCC_OscConfig+0x248>)
 8001298:	2201      	movs	r2, #1
 800129a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800129c:	f7ff fc44 	bl	8000b28 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a4:	f7ff fc40 	bl	8000b28 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e167      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 80012b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f0      	beq.n	80012a4 <HAL_RCC_OscConfig+0x200>
 80012c2:	e01b      	b.n	80012fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <HAL_RCC_OscConfig+0x248>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ca:	f7ff fc2d 	bl	8000b28 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d0:	e00e      	b.n	80012f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d2:	f7ff fc29 	bl	8000b28 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d907      	bls.n	80012f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e150      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
 80012e4:	40023800 	.word	0x40023800
 80012e8:	42470000 	.word	0x42470000
 80012ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f0:	4b88      	ldr	r3, [pc, #544]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 80012f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1ea      	bne.n	80012d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 8097 	beq.w	8001438 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800130e:	4b81      	ldr	r3, [pc, #516]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10f      	bne.n	800133a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	4b7d      	ldr	r3, [pc, #500]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	4a7c      	ldr	r2, [pc, #496]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001328:	6413      	str	r3, [r2, #64]	; 0x40
 800132a:	4b7a      	ldr	r3, [pc, #488]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001336:	2301      	movs	r3, #1
 8001338:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133a:	4b77      	ldr	r3, [pc, #476]	; (8001518 <HAL_RCC_OscConfig+0x474>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001342:	2b00      	cmp	r3, #0
 8001344:	d118      	bne.n	8001378 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001346:	4b74      	ldr	r3, [pc, #464]	; (8001518 <HAL_RCC_OscConfig+0x474>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a73      	ldr	r2, [pc, #460]	; (8001518 <HAL_RCC_OscConfig+0x474>)
 800134c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001352:	f7ff fbe9 	bl	8000b28 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800135a:	f7ff fbe5 	bl	8000b28 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e10c      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136c:	4b6a      	ldr	r3, [pc, #424]	; (8001518 <HAL_RCC_OscConfig+0x474>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f0      	beq.n	800135a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d106      	bne.n	800138e <HAL_RCC_OscConfig+0x2ea>
 8001380:	4b64      	ldr	r3, [pc, #400]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 8001382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001384:	4a63      	ldr	r2, [pc, #396]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6713      	str	r3, [r2, #112]	; 0x70
 800138c:	e01c      	b.n	80013c8 <HAL_RCC_OscConfig+0x324>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2b05      	cmp	r3, #5
 8001394:	d10c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x30c>
 8001396:	4b5f      	ldr	r3, [pc, #380]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 8001398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139a:	4a5e      	ldr	r2, [pc, #376]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	6713      	str	r3, [r2, #112]	; 0x70
 80013a2:	4b5c      	ldr	r3, [pc, #368]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 80013a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a6:	4a5b      	ldr	r2, [pc, #364]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6713      	str	r3, [r2, #112]	; 0x70
 80013ae:	e00b      	b.n	80013c8 <HAL_RCC_OscConfig+0x324>
 80013b0:	4b58      	ldr	r3, [pc, #352]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 80013b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b4:	4a57      	ldr	r2, [pc, #348]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 80013b6:	f023 0301 	bic.w	r3, r3, #1
 80013ba:	6713      	str	r3, [r2, #112]	; 0x70
 80013bc:	4b55      	ldr	r3, [pc, #340]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 80013be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c0:	4a54      	ldr	r2, [pc, #336]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 80013c2:	f023 0304 	bic.w	r3, r3, #4
 80013c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d015      	beq.n	80013fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d0:	f7ff fbaa 	bl	8000b28 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d6:	e00a      	b.n	80013ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d8:	f7ff fba6 	bl	8000b28 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e0cb      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ee:	4b49      	ldr	r3, [pc, #292]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 80013f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0ee      	beq.n	80013d8 <HAL_RCC_OscConfig+0x334>
 80013fa:	e014      	b.n	8001426 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fc:	f7ff fb94 	bl	8000b28 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001402:	e00a      	b.n	800141a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001404:	f7ff fb90 	bl	8000b28 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001412:	4293      	cmp	r3, r2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e0b5      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141a:	4b3e      	ldr	r3, [pc, #248]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 800141c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1ee      	bne.n	8001404 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001426:	7dfb      	ldrb	r3, [r7, #23]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d105      	bne.n	8001438 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800142c:	4b39      	ldr	r3, [pc, #228]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	4a38      	ldr	r2, [pc, #224]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 8001432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001436:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 80a1 	beq.w	8001584 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001442:	4b34      	ldr	r3, [pc, #208]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b08      	cmp	r3, #8
 800144c:	d05c      	beq.n	8001508 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d141      	bne.n	80014da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001456:	4b31      	ldr	r3, [pc, #196]	; (800151c <HAL_RCC_OscConfig+0x478>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fb64 	bl	8000b28 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001464:	f7ff fb60 	bl	8000b28 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e087      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001476:	4b27      	ldr	r3, [pc, #156]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69da      	ldr	r2, [r3, #28]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	019b      	lsls	r3, r3, #6
 8001492:	431a      	orrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001498:	085b      	lsrs	r3, r3, #1
 800149a:	3b01      	subs	r3, #1
 800149c:	041b      	lsls	r3, r3, #16
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a4:	061b      	lsls	r3, r3, #24
 80014a6:	491b      	ldr	r1, [pc, #108]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <HAL_RCC_OscConfig+0x478>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b2:	f7ff fb39 	bl	8000b28 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ba:	f7ff fb35 	bl	8000b28 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e05c      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x416>
 80014d8:	e054      	b.n	8001584 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <HAL_RCC_OscConfig+0x478>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff fb22 	bl	8000b28 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e8:	f7ff fb1e 	bl	8000b28 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e045      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x444>
 8001506:	e03d      	b.n	8001584 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d107      	bne.n	8001520 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e038      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
 8001514:	40023800 	.word	0x40023800
 8001518:	40007000 	.word	0x40007000
 800151c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <HAL_RCC_OscConfig+0x4ec>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d028      	beq.n	8001580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001538:	429a      	cmp	r2, r3
 800153a:	d121      	bne.n	8001580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001546:	429a      	cmp	r2, r3
 8001548:	d11a      	bne.n	8001580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001550:	4013      	ands	r3, r2
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001556:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001558:	4293      	cmp	r3, r2
 800155a:	d111      	bne.n	8001580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001566:	085b      	lsrs	r3, r3, #1
 8001568:	3b01      	subs	r3, #1
 800156a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800156c:	429a      	cmp	r2, r3
 800156e:	d107      	bne.n	8001580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800157c:	429a      	cmp	r2, r3
 800157e:	d001      	beq.n	8001584 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800

08001594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e0cc      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015a8:	4b68      	ldr	r3, [pc, #416]	; (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d90c      	bls.n	80015d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b6:	4b65      	ldr	r3, [pc, #404]	; (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015be:	4b63      	ldr	r3, [pc, #396]	; (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d001      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e0b8      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d020      	beq.n	800161e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d005      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015e8:	4b59      	ldr	r3, [pc, #356]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	4a58      	ldr	r2, [pc, #352]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001600:	4b53      	ldr	r3, [pc, #332]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	4a52      	ldr	r2, [pc, #328]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800160a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800160c:	4b50      	ldr	r3, [pc, #320]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	494d      	ldr	r1, [pc, #308]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	4313      	orrs	r3, r2
 800161c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d044      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d107      	bne.n	8001642 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001632:	4b47      	ldr	r3, [pc, #284]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d119      	bne.n	8001672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e07f      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d003      	beq.n	8001652 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800164e:	2b03      	cmp	r3, #3
 8001650:	d107      	bne.n	8001662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001652:	4b3f      	ldr	r3, [pc, #252]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d109      	bne.n	8001672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e06f      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001662:	4b3b      	ldr	r3, [pc, #236]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e067      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001672:	4b37      	ldr	r3, [pc, #220]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f023 0203 	bic.w	r2, r3, #3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	4934      	ldr	r1, [pc, #208]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	4313      	orrs	r3, r2
 8001682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001684:	f7ff fa50 	bl	8000b28 <HAL_GetTick>
 8001688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168a:	e00a      	b.n	80016a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800168c:	f7ff fa4c 	bl	8000b28 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f241 3288 	movw	r2, #5000	; 0x1388
 800169a:	4293      	cmp	r3, r2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e04f      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a2:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 020c 	and.w	r2, r3, #12
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d1eb      	bne.n	800168c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016b4:	4b25      	ldr	r3, [pc, #148]	; (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d20c      	bcs.n	80016dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c2:	4b22      	ldr	r3, [pc, #136]	; (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ca:	4b20      	ldr	r3, [pc, #128]	; (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e032      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d008      	beq.n	80016fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	4916      	ldr	r1, [pc, #88]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d009      	beq.n	800171a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	490e      	ldr	r1, [pc, #56]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	4313      	orrs	r3, r2
 8001718:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800171a:	f000 f821 	bl	8001760 <HAL_RCC_GetSysClockFreq>
 800171e:	4602      	mov	r2, r0
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	091b      	lsrs	r3, r3, #4
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	490a      	ldr	r1, [pc, #40]	; (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 800172c:	5ccb      	ldrb	r3, [r1, r3]
 800172e:	fa22 f303 	lsr.w	r3, r2, r3
 8001732:	4a09      	ldr	r2, [pc, #36]	; (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_RCC_ClockConfig+0x1c8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff f890 	bl	8000860 <HAL_InitTick>

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023c00 	.word	0x40023c00
 8001750:	40023800 	.word	0x40023800
 8001754:	08004ddc 	.word	0x08004ddc
 8001758:	20000000 	.word	0x20000000
 800175c:	20000004 	.word	0x20000004

08001760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001764:	b090      	sub	sp, #64	; 0x40
 8001766:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	637b      	str	r3, [r7, #52]	; 0x34
 800176c:	2300      	movs	r3, #0
 800176e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001770:	2300      	movs	r3, #0
 8001772:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001778:	4b59      	ldr	r3, [pc, #356]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 030c 	and.w	r3, r3, #12
 8001780:	2b08      	cmp	r3, #8
 8001782:	d00d      	beq.n	80017a0 <HAL_RCC_GetSysClockFreq+0x40>
 8001784:	2b08      	cmp	r3, #8
 8001786:	f200 80a1 	bhi.w	80018cc <HAL_RCC_GetSysClockFreq+0x16c>
 800178a:	2b00      	cmp	r3, #0
 800178c:	d002      	beq.n	8001794 <HAL_RCC_GetSysClockFreq+0x34>
 800178e:	2b04      	cmp	r3, #4
 8001790:	d003      	beq.n	800179a <HAL_RCC_GetSysClockFreq+0x3a>
 8001792:	e09b      	b.n	80018cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001794:	4b53      	ldr	r3, [pc, #332]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001796:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001798:	e09b      	b.n	80018d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800179a:	4b53      	ldr	r3, [pc, #332]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800179c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800179e:	e098      	b.n	80018d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017a0:	4b4f      	ldr	r3, [pc, #316]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017aa:	4b4d      	ldr	r3, [pc, #308]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d028      	beq.n	8001808 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b6:	4b4a      	ldr	r3, [pc, #296]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	099b      	lsrs	r3, r3, #6
 80017bc:	2200      	movs	r2, #0
 80017be:	623b      	str	r3, [r7, #32]
 80017c0:	627a      	str	r2, [r7, #36]	; 0x24
 80017c2:	6a3b      	ldr	r3, [r7, #32]
 80017c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017c8:	2100      	movs	r1, #0
 80017ca:	4b47      	ldr	r3, [pc, #284]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80017cc:	fb03 f201 	mul.w	r2, r3, r1
 80017d0:	2300      	movs	r3, #0
 80017d2:	fb00 f303 	mul.w	r3, r0, r3
 80017d6:	4413      	add	r3, r2
 80017d8:	4a43      	ldr	r2, [pc, #268]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80017da:	fba0 1202 	umull	r1, r2, r0, r2
 80017de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017e0:	460a      	mov	r2, r1
 80017e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80017e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017e6:	4413      	add	r3, r2
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ec:	2200      	movs	r2, #0
 80017ee:	61bb      	str	r3, [r7, #24]
 80017f0:	61fa      	str	r2, [r7, #28]
 80017f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017fa:	f7fe fce9 	bl	80001d0 <__aeabi_uldivmod>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4613      	mov	r3, r2
 8001804:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001806:	e053      	b.n	80018b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001808:	4b35      	ldr	r3, [pc, #212]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	099b      	lsrs	r3, r3, #6
 800180e:	2200      	movs	r2, #0
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	617a      	str	r2, [r7, #20]
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800181a:	f04f 0b00 	mov.w	fp, #0
 800181e:	4652      	mov	r2, sl
 8001820:	465b      	mov	r3, fp
 8001822:	f04f 0000 	mov.w	r0, #0
 8001826:	f04f 0100 	mov.w	r1, #0
 800182a:	0159      	lsls	r1, r3, #5
 800182c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001830:	0150      	lsls	r0, r2, #5
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	ebb2 080a 	subs.w	r8, r2, sl
 800183a:	eb63 090b 	sbc.w	r9, r3, fp
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800184a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800184e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001852:	ebb2 0408 	subs.w	r4, r2, r8
 8001856:	eb63 0509 	sbc.w	r5, r3, r9
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	00eb      	lsls	r3, r5, #3
 8001864:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001868:	00e2      	lsls	r2, r4, #3
 800186a:	4614      	mov	r4, r2
 800186c:	461d      	mov	r5, r3
 800186e:	eb14 030a 	adds.w	r3, r4, sl
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	eb45 030b 	adc.w	r3, r5, fp
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001886:	4629      	mov	r1, r5
 8001888:	028b      	lsls	r3, r1, #10
 800188a:	4621      	mov	r1, r4
 800188c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001890:	4621      	mov	r1, r4
 8001892:	028a      	lsls	r2, r1, #10
 8001894:	4610      	mov	r0, r2
 8001896:	4619      	mov	r1, r3
 8001898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189a:	2200      	movs	r2, #0
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	60fa      	str	r2, [r7, #12]
 80018a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018a4:	f7fe fc94 	bl	80001d0 <__aeabi_uldivmod>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4613      	mov	r3, r2
 80018ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	0c1b      	lsrs	r3, r3, #16
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	3301      	adds	r3, #1
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80018c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018ca:	e002      	b.n	80018d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80018ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3740      	adds	r7, #64	; 0x40
 80018d8:	46bd      	mov	sp, r7
 80018da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800
 80018e4:	00f42400 	.word	0x00f42400
 80018e8:	017d7840 	.word	0x017d7840

080018ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018f0:	4b03      	ldr	r3, [pc, #12]	; (8001900 <HAL_RCC_GetHCLKFreq+0x14>)
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20000000 	.word	0x20000000

08001904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001908:	f7ff fff0 	bl	80018ec <HAL_RCC_GetHCLKFreq>
 800190c:	4602      	mov	r2, r0
 800190e:	4b05      	ldr	r3, [pc, #20]	; (8001924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	0a9b      	lsrs	r3, r3, #10
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	4903      	ldr	r1, [pc, #12]	; (8001928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800191a:	5ccb      	ldrb	r3, [r1, r3]
 800191c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001920:	4618      	mov	r0, r3
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40023800 	.word	0x40023800
 8001928:	08004dec 	.word	0x08004dec

0800192c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	220f      	movs	r2, #15
 800193a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_RCC_GetClockConfig+0x5c>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 0203 	and.w	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <HAL_RCC_GetClockConfig+0x5c>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <HAL_RCC_GetClockConfig+0x5c>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_RCC_GetClockConfig+0x5c>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	08db      	lsrs	r3, r3, #3
 8001966:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800196e:	4b07      	ldr	r3, [pc, #28]	; (800198c <HAL_RCC_GetClockConfig+0x60>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0207 	and.w	r2, r3, #7
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	601a      	str	r2, [r3, #0]
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	40023c00 	.word	0x40023c00

08001990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e041      	b.n	8001a26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d106      	bne.n	80019bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff f82e 	bl	8000a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2202      	movs	r2, #2
 80019c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3304      	adds	r3, #4
 80019cc:	4619      	mov	r1, r3
 80019ce:	4610      	mov	r0, r2
 80019d0:	f000 f9fe 	bl	8001dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d001      	beq.n	8001a48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e04e      	b.n	8001ae6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0201 	orr.w	r2, r2, #1
 8001a5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a23      	ldr	r2, [pc, #140]	; (8001af4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d022      	beq.n	8001ab0 <HAL_TIM_Base_Start_IT+0x80>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a72:	d01d      	beq.n	8001ab0 <HAL_TIM_Base_Start_IT+0x80>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a1f      	ldr	r2, [pc, #124]	; (8001af8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d018      	beq.n	8001ab0 <HAL_TIM_Base_Start_IT+0x80>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a1e      	ldr	r2, [pc, #120]	; (8001afc <HAL_TIM_Base_Start_IT+0xcc>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d013      	beq.n	8001ab0 <HAL_TIM_Base_Start_IT+0x80>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a1c      	ldr	r2, [pc, #112]	; (8001b00 <HAL_TIM_Base_Start_IT+0xd0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d00e      	beq.n	8001ab0 <HAL_TIM_Base_Start_IT+0x80>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a1b      	ldr	r2, [pc, #108]	; (8001b04 <HAL_TIM_Base_Start_IT+0xd4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d009      	beq.n	8001ab0 <HAL_TIM_Base_Start_IT+0x80>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a19      	ldr	r2, [pc, #100]	; (8001b08 <HAL_TIM_Base_Start_IT+0xd8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d004      	beq.n	8001ab0 <HAL_TIM_Base_Start_IT+0x80>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a18      	ldr	r2, [pc, #96]	; (8001b0c <HAL_TIM_Base_Start_IT+0xdc>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d111      	bne.n	8001ad4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d010      	beq.n	8001ae4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 0201 	orr.w	r2, r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ad2:	e007      	b.n	8001ae4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40010000 	.word	0x40010000
 8001af8:	40000400 	.word	0x40000400
 8001afc:	40000800 	.word	0x40000800
 8001b00:	40000c00 	.word	0x40000c00
 8001b04:	40010400 	.word	0x40010400
 8001b08:	40014000 	.word	0x40014000
 8001b0c:	40001800 	.word	0x40001800

08001b10 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0201 	bic.w	r2, r2, #1
 8001b26:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6a1a      	ldr	r2, [r3, #32]
 8001b2e:	f241 1311 	movw	r3, #4369	; 0x1111
 8001b32:	4013      	ands	r3, r2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d10f      	bne.n	8001b58 <HAL_TIM_Base_Stop_IT+0x48>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6a1a      	ldr	r2, [r3, #32]
 8001b3e:	f240 4344 	movw	r3, #1092	; 0x444
 8001b42:	4013      	ands	r3, r2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d107      	bne.n	8001b58 <HAL_TIM_Base_Stop_IT+0x48>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0201 	bic.w	r2, r2, #1
 8001b56:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d122      	bne.n	8001bca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d11b      	bne.n	8001bca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f06f 0202 	mvn.w	r2, #2
 8001b9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f8ee 	bl	8001d92 <HAL_TIM_IC_CaptureCallback>
 8001bb6:	e005      	b.n	8001bc4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f8e0 	bl	8001d7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f8f1 	bl	8001da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d122      	bne.n	8001c1e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f003 0304 	and.w	r3, r3, #4
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d11b      	bne.n	8001c1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f06f 0204 	mvn.w	r2, #4
 8001bee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f8c4 	bl	8001d92 <HAL_TIM_IC_CaptureCallback>
 8001c0a:	e005      	b.n	8001c18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f8b6 	bl	8001d7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f8c7 	bl	8001da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d122      	bne.n	8001c72 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d11b      	bne.n	8001c72 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f06f 0208 	mvn.w	r2, #8
 8001c42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2204      	movs	r2, #4
 8001c48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f89a 	bl	8001d92 <HAL_TIM_IC_CaptureCallback>
 8001c5e:	e005      	b.n	8001c6c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f88c 	bl	8001d7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f89d 	bl	8001da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	2b10      	cmp	r3, #16
 8001c7e:	d122      	bne.n	8001cc6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2b10      	cmp	r3, #16
 8001c8c:	d11b      	bne.n	8001cc6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f06f 0210 	mvn.w	r2, #16
 8001c96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2208      	movs	r2, #8
 8001c9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f870 	bl	8001d92 <HAL_TIM_IC_CaptureCallback>
 8001cb2:	e005      	b.n	8001cc0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f862 	bl	8001d7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f873 	bl	8001da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d10e      	bne.n	8001cf2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d107      	bne.n	8001cf2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f06f 0201 	mvn.w	r2, #1
 8001cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7fe fd65 	bl	80007bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfc:	2b80      	cmp	r3, #128	; 0x80
 8001cfe:	d10e      	bne.n	8001d1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0a:	2b80      	cmp	r3, #128	; 0x80
 8001d0c:	d107      	bne.n	8001d1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f903 	bl	8001f24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d28:	2b40      	cmp	r3, #64	; 0x40
 8001d2a:	d10e      	bne.n	8001d4a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d36:	2b40      	cmp	r3, #64	; 0x40
 8001d38:	d107      	bne.n	8001d4a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f838 	bl	8001dba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	f003 0320 	and.w	r3, r3, #32
 8001d54:	2b20      	cmp	r3, #32
 8001d56:	d10e      	bne.n	8001d76 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f003 0320 	and.w	r3, r3, #32
 8001d62:	2b20      	cmp	r3, #32
 8001d64:	d107      	bne.n	8001d76 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f06f 0220 	mvn.w	r2, #32
 8001d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f8cd 	bl	8001f10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a40      	ldr	r2, [pc, #256]	; (8001ee4 <TIM_Base_SetConfig+0x114>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d013      	beq.n	8001e10 <TIM_Base_SetConfig+0x40>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dee:	d00f      	beq.n	8001e10 <TIM_Base_SetConfig+0x40>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a3d      	ldr	r2, [pc, #244]	; (8001ee8 <TIM_Base_SetConfig+0x118>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d00b      	beq.n	8001e10 <TIM_Base_SetConfig+0x40>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a3c      	ldr	r2, [pc, #240]	; (8001eec <TIM_Base_SetConfig+0x11c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d007      	beq.n	8001e10 <TIM_Base_SetConfig+0x40>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a3b      	ldr	r2, [pc, #236]	; (8001ef0 <TIM_Base_SetConfig+0x120>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d003      	beq.n	8001e10 <TIM_Base_SetConfig+0x40>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a3a      	ldr	r2, [pc, #232]	; (8001ef4 <TIM_Base_SetConfig+0x124>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d108      	bne.n	8001e22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a2f      	ldr	r2, [pc, #188]	; (8001ee4 <TIM_Base_SetConfig+0x114>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d02b      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e30:	d027      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a2c      	ldr	r2, [pc, #176]	; (8001ee8 <TIM_Base_SetConfig+0x118>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d023      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a2b      	ldr	r2, [pc, #172]	; (8001eec <TIM_Base_SetConfig+0x11c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d01f      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a2a      	ldr	r2, [pc, #168]	; (8001ef0 <TIM_Base_SetConfig+0x120>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d01b      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a29      	ldr	r2, [pc, #164]	; (8001ef4 <TIM_Base_SetConfig+0x124>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d017      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a28      	ldr	r2, [pc, #160]	; (8001ef8 <TIM_Base_SetConfig+0x128>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a27      	ldr	r2, [pc, #156]	; (8001efc <TIM_Base_SetConfig+0x12c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00f      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a26      	ldr	r2, [pc, #152]	; (8001f00 <TIM_Base_SetConfig+0x130>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00b      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a25      	ldr	r2, [pc, #148]	; (8001f04 <TIM_Base_SetConfig+0x134>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d007      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a24      	ldr	r2, [pc, #144]	; (8001f08 <TIM_Base_SetConfig+0x138>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d003      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a23      	ldr	r2, [pc, #140]	; (8001f0c <TIM_Base_SetConfig+0x13c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d108      	bne.n	8001e94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <TIM_Base_SetConfig+0x114>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d003      	beq.n	8001ec8 <TIM_Base_SetConfig+0xf8>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a0c      	ldr	r2, [pc, #48]	; (8001ef4 <TIM_Base_SetConfig+0x124>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d103      	bne.n	8001ed0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	615a      	str	r2, [r3, #20]
}
 8001ed6:	bf00      	nop
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40010000 	.word	0x40010000
 8001ee8:	40000400 	.word	0x40000400
 8001eec:	40000800 	.word	0x40000800
 8001ef0:	40000c00 	.word	0x40000c00
 8001ef4:	40010400 	.word	0x40010400
 8001ef8:	40014000 	.word	0x40014000
 8001efc:	40014400 	.word	0x40014400
 8001f00:	40014800 	.word	0x40014800
 8001f04:	40001800 	.word	0x40001800
 8001f08:	40001c00 	.word	0x40001c00
 8001f0c:	40002000 	.word	0x40002000

08001f10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <__NVIC_SetPriority>:
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	6039      	str	r1, [r7, #0]
 8001f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	db0a      	blt.n	8001f62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	490c      	ldr	r1, [pc, #48]	; (8001f84 <__NVIC_SetPriority+0x4c>)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f60:	e00a      	b.n	8001f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4908      	ldr	r1, [pc, #32]	; (8001f88 <__NVIC_SetPriority+0x50>)
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	3b04      	subs	r3, #4
 8001f70:	0112      	lsls	r2, r2, #4
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	440b      	add	r3, r1
 8001f76:	761a      	strb	r2, [r3, #24]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000e100 	.word	0xe000e100
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <SysTick_Handler+0x1c>)
 8001f92:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001f94:	f001 fd28 	bl	80039e8 <xTaskGetSchedulerState>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d001      	beq.n	8001fa2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001f9e:	f002 fb13 	bl	80045c8 <xPortSysTickHandler>
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	e000e010 	.word	0xe000e010

08001fac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	f06f 0004 	mvn.w	r0, #4
 8001fb6:	f7ff ffbf 	bl	8001f38 <__NVIC_SetPriority>
#endif
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fc6:	f3ef 8305 	mrs	r3, IPSR
 8001fca:	603b      	str	r3, [r7, #0]
  return(result);
 8001fcc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001fd2:	f06f 0305 	mvn.w	r3, #5
 8001fd6:	607b      	str	r3, [r7, #4]
 8001fd8:	e00c      	b.n	8001ff4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <osKernelInitialize+0x44>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d105      	bne.n	8001fee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <osKernelInitialize+0x44>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	607b      	str	r3, [r7, #4]
 8001fec:	e002      	b.n	8001ff4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ff2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001ff4:	687b      	ldr	r3, [r7, #4]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	2000013c 	.word	0x2000013c

08002008 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800200e:	f3ef 8305 	mrs	r3, IPSR
 8002012:	603b      	str	r3, [r7, #0]
  return(result);
 8002014:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <osKernelStart+0x1a>
    stat = osErrorISR;
 800201a:	f06f 0305 	mvn.w	r3, #5
 800201e:	607b      	str	r3, [r7, #4]
 8002020:	e010      	b.n	8002044 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002022:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <osKernelStart+0x48>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d109      	bne.n	800203e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800202a:	f7ff ffbf 	bl	8001fac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800202e:	4b08      	ldr	r3, [pc, #32]	; (8002050 <osKernelStart+0x48>)
 8002030:	2202      	movs	r2, #2
 8002032:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002034:	f001 f87c 	bl	8003130 <vTaskStartScheduler>
      stat = osOK;
 8002038:	2300      	movs	r3, #0
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	e002      	b.n	8002044 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800203e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002042:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002044:	687b      	ldr	r3, [r7, #4]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	2000013c 	.word	0x2000013c

08002054 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002054:	b580      	push	{r7, lr}
 8002056:	b08e      	sub	sp, #56	; 0x38
 8002058:	af04      	add	r7, sp, #16
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002060:	2300      	movs	r3, #0
 8002062:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002064:	f3ef 8305 	mrs	r3, IPSR
 8002068:	617b      	str	r3, [r7, #20]
  return(result);
 800206a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800206c:	2b00      	cmp	r3, #0
 800206e:	d17e      	bne.n	800216e <osThreadNew+0x11a>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d07b      	beq.n	800216e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002076:	2340      	movs	r3, #64	; 0x40
 8002078:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800207a:	2318      	movs	r3, #24
 800207c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800207e:	2300      	movs	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002086:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d045      	beq.n	800211a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <osThreadNew+0x48>
        name = attr->name;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d002      	beq.n	80020aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d008      	beq.n	80020c2 <osThreadNew+0x6e>
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	2b38      	cmp	r3, #56	; 0x38
 80020b4:	d805      	bhi.n	80020c2 <osThreadNew+0x6e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <osThreadNew+0x72>
        return (NULL);
 80020c2:	2300      	movs	r3, #0
 80020c4:	e054      	b.n	8002170 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	089b      	lsrs	r3, r3, #2
 80020d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00e      	beq.n	80020fc <osThreadNew+0xa8>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	2bcb      	cmp	r3, #203	; 0xcb
 80020e4:	d90a      	bls.n	80020fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d006      	beq.n	80020fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d002      	beq.n	80020fc <osThreadNew+0xa8>
        mem = 1;
 80020f6:	2301      	movs	r3, #1
 80020f8:	61bb      	str	r3, [r7, #24]
 80020fa:	e010      	b.n	800211e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10c      	bne.n	800211e <osThreadNew+0xca>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d108      	bne.n	800211e <osThreadNew+0xca>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d104      	bne.n	800211e <osThreadNew+0xca>
          mem = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	61bb      	str	r3, [r7, #24]
 8002118:	e001      	b.n	800211e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d110      	bne.n	8002146 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800212c:	9202      	str	r2, [sp, #8]
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	6a3a      	ldr	r2, [r7, #32]
 8002138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 fe0c 	bl	8002d58 <xTaskCreateStatic>
 8002140:	4603      	mov	r3, r0
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	e013      	b.n	800216e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d110      	bne.n	800216e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800214c:	6a3b      	ldr	r3, [r7, #32]
 800214e:	b29a      	uxth	r2, r3
 8002150:	f107 0310 	add.w	r3, r7, #16
 8002154:	9301      	str	r3, [sp, #4]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 fe57 	bl	8002e12 <xTaskCreate>
 8002164:	4603      	mov	r3, r0
 8002166:	2b01      	cmp	r3, #1
 8002168:	d001      	beq.n	800216e <osThreadNew+0x11a>
            hTask = NULL;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800216e:	693b      	ldr	r3, [r7, #16]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3728      	adds	r7, #40	; 0x28
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002180:	f3ef 8305 	mrs	r3, IPSR
 8002184:	60bb      	str	r3, [r7, #8]
  return(result);
 8002186:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <osDelay+0x1c>
    stat = osErrorISR;
 800218c:	f06f 0305 	mvn.w	r3, #5
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	e007      	b.n	80021a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 ff92 	bl	80030c8 <vTaskDelay>
    }
  }

  return (stat);
 80021a4:	68fb      	ldr	r3, [r7, #12]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4a07      	ldr	r2, [pc, #28]	; (80021dc <vApplicationGetIdleTaskMemory+0x2c>)
 80021c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	4a06      	ldr	r2, [pc, #24]	; (80021e0 <vApplicationGetIdleTaskMemory+0x30>)
 80021c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2240      	movs	r2, #64	; 0x40
 80021cc:	601a      	str	r2, [r3, #0]
}
 80021ce:	bf00      	nop
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000140 	.word	0x20000140
 80021e0:	2000020c 	.word	0x2000020c

080021e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4a07      	ldr	r2, [pc, #28]	; (8002210 <vApplicationGetTimerTaskMemory+0x2c>)
 80021f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	4a06      	ldr	r2, [pc, #24]	; (8002214 <vApplicationGetTimerTaskMemory+0x30>)
 80021fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2280      	movs	r2, #128	; 0x80
 8002200:	601a      	str	r2, [r3, #0]
}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	2000030c 	.word	0x2000030c
 8002214:	200003d8 	.word	0x200003d8

08002218 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f103 0208 	add.w	r2, r3, #8
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002230:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f103 0208 	add.w	r2, r3, #8
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f103 0208 	add.w	r2, r3, #8
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002272:	b480      	push	{r7}
 8002274:	b085      	sub	sp, #20
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	1c5a      	adds	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	601a      	str	r2, [r3, #0]
}
 80022ae:	bf00      	nop
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022ba:	b480      	push	{r7}
 80022bc:	b085      	sub	sp, #20
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022d0:	d103      	bne.n	80022da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	e00c      	b.n	80022f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3308      	adds	r3, #8
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	e002      	b.n	80022e8 <vListInsert+0x2e>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d2f6      	bcs.n	80022e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	601a      	str	r2, [r3, #0]
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6892      	ldr	r2, [r2, #8]
 8002342:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6852      	ldr	r2, [r2, #4]
 800234c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	429a      	cmp	r2, r3
 8002356:	d103      	bne.n	8002360 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	1e5a      	subs	r2, r3, #1
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10a      	bne.n	80023aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002398:	f383 8811 	msr	BASEPRI, r3
 800239c:	f3bf 8f6f 	isb	sy
 80023a0:	f3bf 8f4f 	dsb	sy
 80023a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80023a6:	bf00      	nop
 80023a8:	e7fe      	b.n	80023a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80023aa:	f002 f87b 	bl	80044a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b6:	68f9      	ldr	r1, [r7, #12]
 80023b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023ba:	fb01 f303 	mul.w	r3, r1, r3
 80023be:	441a      	add	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023da:	3b01      	subs	r3, #1
 80023dc:	68f9      	ldr	r1, [r7, #12]
 80023de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	441a      	add	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	22ff      	movs	r2, #255	; 0xff
 80023ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	22ff      	movs	r2, #255	; 0xff
 80023f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d114      	bne.n	800242a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d01a      	beq.n	800243e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	3310      	adds	r3, #16
 800240c:	4618      	mov	r0, r3
 800240e:	f001 f929 	bl	8003664 <xTaskRemoveFromEventList>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d012      	beq.n	800243e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002418:	4b0c      	ldr	r3, [pc, #48]	; (800244c <xQueueGenericReset+0xcc>)
 800241a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	f3bf 8f4f 	dsb	sy
 8002424:	f3bf 8f6f 	isb	sy
 8002428:	e009      	b.n	800243e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	3310      	adds	r3, #16
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fef2 	bl	8002218 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	3324      	adds	r3, #36	; 0x24
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff feed 	bl	8002218 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800243e:	f002 f861 	bl	8004504 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002442:	2301      	movs	r3, #1
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	e000ed04 	.word	0xe000ed04

08002450 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08e      	sub	sp, #56	; 0x38
 8002454:	af02      	add	r7, sp, #8
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10a      	bne.n	800247a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002468:	f383 8811 	msr	BASEPRI, r3
 800246c:	f3bf 8f6f 	isb	sy
 8002470:	f3bf 8f4f 	dsb	sy
 8002474:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002476:	bf00      	nop
 8002478:	e7fe      	b.n	8002478 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10a      	bne.n	8002496 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002484:	f383 8811 	msr	BASEPRI, r3
 8002488:	f3bf 8f6f 	isb	sy
 800248c:	f3bf 8f4f 	dsb	sy
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002492:	bf00      	nop
 8002494:	e7fe      	b.n	8002494 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <xQueueGenericCreateStatic+0x52>
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <xQueueGenericCreateStatic+0x56>
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <xQueueGenericCreateStatic+0x58>
 80024a6:	2300      	movs	r3, #0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10a      	bne.n	80024c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80024ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b0:	f383 8811 	msr	BASEPRI, r3
 80024b4:	f3bf 8f6f 	isb	sy
 80024b8:	f3bf 8f4f 	dsb	sy
 80024bc:	623b      	str	r3, [r7, #32]
}
 80024be:	bf00      	nop
 80024c0:	e7fe      	b.n	80024c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d102      	bne.n	80024ce <xQueueGenericCreateStatic+0x7e>
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <xQueueGenericCreateStatic+0x82>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <xQueueGenericCreateStatic+0x84>
 80024d2:	2300      	movs	r3, #0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10a      	bne.n	80024ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80024d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024dc:	f383 8811 	msr	BASEPRI, r3
 80024e0:	f3bf 8f6f 	isb	sy
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	61fb      	str	r3, [r7, #28]
}
 80024ea:	bf00      	nop
 80024ec:	e7fe      	b.n	80024ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80024ee:	2350      	movs	r3, #80	; 0x50
 80024f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2b50      	cmp	r3, #80	; 0x50
 80024f6:	d00a      	beq.n	800250e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80024f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024fc:	f383 8811 	msr	BASEPRI, r3
 8002500:	f3bf 8f6f 	isb	sy
 8002504:	f3bf 8f4f 	dsb	sy
 8002508:	61bb      	str	r3, [r7, #24]
}
 800250a:	bf00      	nop
 800250c:	e7fe      	b.n	800250c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800250e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00d      	beq.n	8002536 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800251a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002522:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	4613      	mov	r3, r2
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	68b9      	ldr	r1, [r7, #8]
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 f805 	bl	8002540 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002538:	4618      	mov	r0, r3
 800253a:	3730      	adds	r7, #48	; 0x30
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
 800254c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d103      	bne.n	800255c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	e002      	b.n	8002562 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800256e:	2101      	movs	r1, #1
 8002570:	69b8      	ldr	r0, [r7, #24]
 8002572:	f7ff ff05 	bl	8002380 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	78fa      	ldrb	r2, [r7, #3]
 800257a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800257e:	bf00      	nop
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08e      	sub	sp, #56	; 0x38
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002596:	2300      	movs	r3, #0
 8002598:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10a      	bne.n	80025ba <xQueueGenericSend+0x32>
	__asm volatile
 80025a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a8:	f383 8811 	msr	BASEPRI, r3
 80025ac:	f3bf 8f6f 	isb	sy
 80025b0:	f3bf 8f4f 	dsb	sy
 80025b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80025b6:	bf00      	nop
 80025b8:	e7fe      	b.n	80025b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d103      	bne.n	80025c8 <xQueueGenericSend+0x40>
 80025c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <xQueueGenericSend+0x44>
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <xQueueGenericSend+0x46>
 80025cc:	2300      	movs	r3, #0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10a      	bne.n	80025e8 <xQueueGenericSend+0x60>
	__asm volatile
 80025d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d6:	f383 8811 	msr	BASEPRI, r3
 80025da:	f3bf 8f6f 	isb	sy
 80025de:	f3bf 8f4f 	dsb	sy
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80025e4:	bf00      	nop
 80025e6:	e7fe      	b.n	80025e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d103      	bne.n	80025f6 <xQueueGenericSend+0x6e>
 80025ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d101      	bne.n	80025fa <xQueueGenericSend+0x72>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <xQueueGenericSend+0x74>
 80025fa:	2300      	movs	r3, #0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10a      	bne.n	8002616 <xQueueGenericSend+0x8e>
	__asm volatile
 8002600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002604:	f383 8811 	msr	BASEPRI, r3
 8002608:	f3bf 8f6f 	isb	sy
 800260c:	f3bf 8f4f 	dsb	sy
 8002610:	623b      	str	r3, [r7, #32]
}
 8002612:	bf00      	nop
 8002614:	e7fe      	b.n	8002614 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002616:	f001 f9e7 	bl	80039e8 <xTaskGetSchedulerState>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d102      	bne.n	8002626 <xQueueGenericSend+0x9e>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <xQueueGenericSend+0xa2>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <xQueueGenericSend+0xa4>
 800262a:	2300      	movs	r3, #0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10a      	bne.n	8002646 <xQueueGenericSend+0xbe>
	__asm volatile
 8002630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002634:	f383 8811 	msr	BASEPRI, r3
 8002638:	f3bf 8f6f 	isb	sy
 800263c:	f3bf 8f4f 	dsb	sy
 8002640:	61fb      	str	r3, [r7, #28]
}
 8002642:	bf00      	nop
 8002644:	e7fe      	b.n	8002644 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002646:	f001 ff2d 	bl	80044a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002652:	429a      	cmp	r2, r3
 8002654:	d302      	bcc.n	800265c <xQueueGenericSend+0xd4>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d129      	bne.n	80026b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	68b9      	ldr	r1, [r7, #8]
 8002660:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002662:	f000 fa0b 	bl	8002a7c <prvCopyDataToQueue>
 8002666:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	2b00      	cmp	r3, #0
 800266e:	d010      	beq.n	8002692 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002672:	3324      	adds	r3, #36	; 0x24
 8002674:	4618      	mov	r0, r3
 8002676:	f000 fff5 	bl	8003664 <xTaskRemoveFromEventList>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d013      	beq.n	80026a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002680:	4b3f      	ldr	r3, [pc, #252]	; (8002780 <xQueueGenericSend+0x1f8>)
 8002682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	f3bf 8f4f 	dsb	sy
 800268c:	f3bf 8f6f 	isb	sy
 8002690:	e00a      	b.n	80026a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002694:	2b00      	cmp	r3, #0
 8002696:	d007      	beq.n	80026a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002698:	4b39      	ldr	r3, [pc, #228]	; (8002780 <xQueueGenericSend+0x1f8>)
 800269a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	f3bf 8f4f 	dsb	sy
 80026a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80026a8:	f001 ff2c 	bl	8004504 <vPortExitCritical>
				return pdPASS;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e063      	b.n	8002778 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d103      	bne.n	80026be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80026b6:	f001 ff25 	bl	8004504 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e05c      	b.n	8002778 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80026be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d106      	bne.n	80026d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80026c4:	f107 0314 	add.w	r3, r7, #20
 80026c8:	4618      	mov	r0, r3
 80026ca:	f001 f82f 	bl	800372c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80026ce:	2301      	movs	r3, #1
 80026d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80026d2:	f001 ff17 	bl	8004504 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80026d6:	f000 fd9b 	bl	8003210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80026da:	f001 fee3 	bl	80044a4 <vPortEnterCritical>
 80026de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026e4:	b25b      	sxtb	r3, r3
 80026e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ea:	d103      	bne.n	80026f4 <xQueueGenericSend+0x16c>
 80026ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026fa:	b25b      	sxtb	r3, r3
 80026fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002700:	d103      	bne.n	800270a <xQueueGenericSend+0x182>
 8002702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800270a:	f001 fefb 	bl	8004504 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800270e:	1d3a      	adds	r2, r7, #4
 8002710:	f107 0314 	add.w	r3, r7, #20
 8002714:	4611      	mov	r1, r2
 8002716:	4618      	mov	r0, r3
 8002718:	f001 f81e 	bl	8003758 <xTaskCheckForTimeOut>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d124      	bne.n	800276c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002722:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002724:	f000 faa2 	bl	8002c6c <prvIsQueueFull>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d018      	beq.n	8002760 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800272e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002730:	3310      	adds	r3, #16
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f000 ff44 	bl	80035c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800273c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800273e:	f000 fa2d 	bl	8002b9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002742:	f000 fd73 	bl	800322c <xTaskResumeAll>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	f47f af7c 	bne.w	8002646 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <xQueueGenericSend+0x1f8>)
 8002750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	f3bf 8f4f 	dsb	sy
 800275a:	f3bf 8f6f 	isb	sy
 800275e:	e772      	b.n	8002646 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002762:	f000 fa1b 	bl	8002b9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002766:	f000 fd61 	bl	800322c <xTaskResumeAll>
 800276a:	e76c      	b.n	8002646 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800276c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800276e:	f000 fa15 	bl	8002b9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002772:	f000 fd5b 	bl	800322c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002776:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002778:	4618      	mov	r0, r3
 800277a:	3738      	adds	r7, #56	; 0x38
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	e000ed04 	.word	0xe000ed04

08002784 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b090      	sub	sp, #64	; 0x40
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10a      	bne.n	80027b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800279c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a0:	f383 8811 	msr	BASEPRI, r3
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	f3bf 8f4f 	dsb	sy
 80027ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80027ae:	bf00      	nop
 80027b0:	e7fe      	b.n	80027b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d103      	bne.n	80027c0 <xQueueGenericSendFromISR+0x3c>
 80027b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <xQueueGenericSendFromISR+0x40>
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <xQueueGenericSendFromISR+0x42>
 80027c4:	2300      	movs	r3, #0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10a      	bne.n	80027e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80027ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ce:	f383 8811 	msr	BASEPRI, r3
 80027d2:	f3bf 8f6f 	isb	sy
 80027d6:	f3bf 8f4f 	dsb	sy
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80027dc:	bf00      	nop
 80027de:	e7fe      	b.n	80027de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d103      	bne.n	80027ee <xQueueGenericSendFromISR+0x6a>
 80027e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <xQueueGenericSendFromISR+0x6e>
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <xQueueGenericSendFromISR+0x70>
 80027f2:	2300      	movs	r3, #0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10a      	bne.n	800280e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80027f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fc:	f383 8811 	msr	BASEPRI, r3
 8002800:	f3bf 8f6f 	isb	sy
 8002804:	f3bf 8f4f 	dsb	sy
 8002808:	623b      	str	r3, [r7, #32]
}
 800280a:	bf00      	nop
 800280c:	e7fe      	b.n	800280c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800280e:	f001 ff2b 	bl	8004668 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002812:	f3ef 8211 	mrs	r2, BASEPRI
 8002816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281a:	f383 8811 	msr	BASEPRI, r3
 800281e:	f3bf 8f6f 	isb	sy
 8002822:	f3bf 8f4f 	dsb	sy
 8002826:	61fa      	str	r2, [r7, #28]
 8002828:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800282a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800282c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800282e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002836:	429a      	cmp	r2, r3
 8002838:	d302      	bcc.n	8002840 <xQueueGenericSendFromISR+0xbc>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d12f      	bne.n	80028a0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002842:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800284a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	68b9      	ldr	r1, [r7, #8]
 8002854:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002856:	f000 f911 	bl	8002a7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800285a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800285e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002862:	d112      	bne.n	800288a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	2b00      	cmp	r3, #0
 800286a:	d016      	beq.n	800289a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800286c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286e:	3324      	adds	r3, #36	; 0x24
 8002870:	4618      	mov	r0, r3
 8002872:	f000 fef7 	bl	8003664 <xTaskRemoveFromEventList>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00e      	beq.n	800289a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00b      	beq.n	800289a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	e007      	b.n	800289a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800288a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800288e:	3301      	adds	r3, #1
 8002890:	b2db      	uxtb	r3, r3
 8002892:	b25a      	sxtb	r2, r3
 8002894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800289a:	2301      	movs	r3, #1
 800289c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800289e:	e001      	b.n	80028a4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80028ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80028b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3740      	adds	r7, #64	; 0x40
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08c      	sub	sp, #48	; 0x30
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80028c8:	2300      	movs	r3, #0
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80028d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10a      	bne.n	80028ec <xQueueReceive+0x30>
	__asm volatile
 80028d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028da:	f383 8811 	msr	BASEPRI, r3
 80028de:	f3bf 8f6f 	isb	sy
 80028e2:	f3bf 8f4f 	dsb	sy
 80028e6:	623b      	str	r3, [r7, #32]
}
 80028e8:	bf00      	nop
 80028ea:	e7fe      	b.n	80028ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d103      	bne.n	80028fa <xQueueReceive+0x3e>
 80028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <xQueueReceive+0x42>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <xQueueReceive+0x44>
 80028fe:	2300      	movs	r3, #0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10a      	bne.n	800291a <xQueueReceive+0x5e>
	__asm volatile
 8002904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002908:	f383 8811 	msr	BASEPRI, r3
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	f3bf 8f4f 	dsb	sy
 8002914:	61fb      	str	r3, [r7, #28]
}
 8002916:	bf00      	nop
 8002918:	e7fe      	b.n	8002918 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800291a:	f001 f865 	bl	80039e8 <xTaskGetSchedulerState>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d102      	bne.n	800292a <xQueueReceive+0x6e>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <xQueueReceive+0x72>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <xQueueReceive+0x74>
 800292e:	2300      	movs	r3, #0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10a      	bne.n	800294a <xQueueReceive+0x8e>
	__asm volatile
 8002934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002938:	f383 8811 	msr	BASEPRI, r3
 800293c:	f3bf 8f6f 	isb	sy
 8002940:	f3bf 8f4f 	dsb	sy
 8002944:	61bb      	str	r3, [r7, #24]
}
 8002946:	bf00      	nop
 8002948:	e7fe      	b.n	8002948 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800294a:	f001 fdab 	bl	80044a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002952:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	2b00      	cmp	r3, #0
 8002958:	d01f      	beq.n	800299a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800295e:	f000 f8f7 	bl	8002b50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	1e5a      	subs	r2, r3, #1
 8002966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002968:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800296a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00f      	beq.n	8002992 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002974:	3310      	adds	r3, #16
 8002976:	4618      	mov	r0, r3
 8002978:	f000 fe74 	bl	8003664 <xTaskRemoveFromEventList>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d007      	beq.n	8002992 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002982:	4b3d      	ldr	r3, [pc, #244]	; (8002a78 <xQueueReceive+0x1bc>)
 8002984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	f3bf 8f4f 	dsb	sy
 800298e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002992:	f001 fdb7 	bl	8004504 <vPortExitCritical>
				return pdPASS;
 8002996:	2301      	movs	r3, #1
 8002998:	e069      	b.n	8002a6e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d103      	bne.n	80029a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80029a0:	f001 fdb0 	bl	8004504 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80029a4:	2300      	movs	r3, #0
 80029a6:	e062      	b.n	8002a6e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029ae:	f107 0310 	add.w	r3, r7, #16
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 feba 	bl	800372c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80029b8:	2301      	movs	r3, #1
 80029ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029bc:	f001 fda2 	bl	8004504 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80029c0:	f000 fc26 	bl	8003210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029c4:	f001 fd6e 	bl	80044a4 <vPortEnterCritical>
 80029c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029ce:	b25b      	sxtb	r3, r3
 80029d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029d4:	d103      	bne.n	80029de <xQueueReceive+0x122>
 80029d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029e4:	b25b      	sxtb	r3, r3
 80029e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029ea:	d103      	bne.n	80029f4 <xQueueReceive+0x138>
 80029ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029f4:	f001 fd86 	bl	8004504 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029f8:	1d3a      	adds	r2, r7, #4
 80029fa:	f107 0310 	add.w	r3, r7, #16
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fea9 	bl	8003758 <xTaskCheckForTimeOut>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d123      	bne.n	8002a54 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a0e:	f000 f917 	bl	8002c40 <prvIsQueueEmpty>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d017      	beq.n	8002a48 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1a:	3324      	adds	r3, #36	; 0x24
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fdcf 	bl	80035c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a28:	f000 f8b8 	bl	8002b9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a2c:	f000 fbfe 	bl	800322c <xTaskResumeAll>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d189      	bne.n	800294a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002a36:	4b10      	ldr	r3, [pc, #64]	; (8002a78 <xQueueReceive+0x1bc>)
 8002a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	e780      	b.n	800294a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002a48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a4a:	f000 f8a7 	bl	8002b9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a4e:	f000 fbed 	bl	800322c <xTaskResumeAll>
 8002a52:	e77a      	b.n	800294a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002a54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a56:	f000 f8a1 	bl	8002b9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a5a:	f000 fbe7 	bl	800322c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a60:	f000 f8ee 	bl	8002c40 <prvIsQueueEmpty>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f43f af6f 	beq.w	800294a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002a6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3730      	adds	r7, #48	; 0x30
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	e000ed04 	.word	0xe000ed04

08002a7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10d      	bne.n	8002ab6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d14d      	bne.n	8002b3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 ffbc 	bl	8003a24 <xTaskPriorityDisinherit>
 8002aac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	e043      	b.n	8002b3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d119      	bne.n	8002af0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6858      	ldr	r0, [r3, #4]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	f002 f81e 	bl	8004b08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	441a      	add	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d32b      	bcc.n	8002b3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	e026      	b.n	8002b3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	68d8      	ldr	r0, [r3, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	461a      	mov	r2, r3
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	f002 f804 	bl	8004b08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	425b      	negs	r3, r3
 8002b0a:	441a      	add	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d207      	bcs.n	8002b2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	425b      	negs	r3, r3
 8002b26:	441a      	add	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d105      	bne.n	8002b3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d002      	beq.n	8002b3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002b46:	697b      	ldr	r3, [r7, #20]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d018      	beq.n	8002b94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	441a      	add	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d303      	bcc.n	8002b84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68d9      	ldr	r1, [r3, #12]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	6838      	ldr	r0, [r7, #0]
 8002b90:	f001 ffba 	bl	8004b08 <memcpy>
	}
}
 8002b94:	bf00      	nop
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ba4:	f001 fc7e 	bl	80044a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bb0:	e011      	b.n	8002bd6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d012      	beq.n	8002be0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3324      	adds	r3, #36	; 0x24
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fd50 	bl	8003664 <xTaskRemoveFromEventList>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002bca:	f000 fe27 	bl	800381c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	dce9      	bgt.n	8002bb2 <prvUnlockQueue+0x16>
 8002bde:	e000      	b.n	8002be2 <prvUnlockQueue+0x46>
					break;
 8002be0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	22ff      	movs	r2, #255	; 0xff
 8002be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002bea:	f001 fc8b 	bl	8004504 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002bee:	f001 fc59 	bl	80044a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bf8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bfa:	e011      	b.n	8002c20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d012      	beq.n	8002c2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3310      	adds	r3, #16
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 fd2b 	bl	8003664 <xTaskRemoveFromEventList>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002c14:	f000 fe02 	bl	800381c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002c18:	7bbb      	ldrb	r3, [r7, #14]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	dce9      	bgt.n	8002bfc <prvUnlockQueue+0x60>
 8002c28:	e000      	b.n	8002c2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002c2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	22ff      	movs	r2, #255	; 0xff
 8002c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002c34:	f001 fc66 	bl	8004504 <vPortExitCritical>
}
 8002c38:	bf00      	nop
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c48:	f001 fc2c 	bl	80044a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d102      	bne.n	8002c5a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002c54:	2301      	movs	r3, #1
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	e001      	b.n	8002c5e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c5e:	f001 fc51 	bl	8004504 <vPortExitCritical>

	return xReturn;
 8002c62:	68fb      	ldr	r3, [r7, #12]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c74:	f001 fc16 	bl	80044a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d102      	bne.n	8002c8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002c84:	2301      	movs	r3, #1
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	e001      	b.n	8002c8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c8e:	f001 fc39 	bl	8004504 <vPortExitCritical>

	return xReturn;
 8002c92:	68fb      	ldr	r3, [r7, #12]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	e014      	b.n	8002cd6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002cac:	4a0f      	ldr	r2, [pc, #60]	; (8002cec <vQueueAddToRegistry+0x50>)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10b      	bne.n	8002cd0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002cb8:	490c      	ldr	r1, [pc, #48]	; (8002cec <vQueueAddToRegistry+0x50>)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002cc2:	4a0a      	ldr	r2, [pc, #40]	; (8002cec <vQueueAddToRegistry+0x50>)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4413      	add	r3, r2
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002cce:	e006      	b.n	8002cde <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2b07      	cmp	r3, #7
 8002cda:	d9e7      	bls.n	8002cac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	200005d8 	.word	0x200005d8

08002cf0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002d00:	f001 fbd0 	bl	80044a4 <vPortEnterCritical>
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d0a:	b25b      	sxtb	r3, r3
 8002d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d10:	d103      	bne.n	8002d1a <vQueueWaitForMessageRestricted+0x2a>
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d20:	b25b      	sxtb	r3, r3
 8002d22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d26:	d103      	bne.n	8002d30 <vQueueWaitForMessageRestricted+0x40>
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d30:	f001 fbe8 	bl	8004504 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d106      	bne.n	8002d4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	3324      	adds	r3, #36	; 0x24
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fc61 	bl	800360c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002d4a:	6978      	ldr	r0, [r7, #20]
 8002d4c:	f7ff ff26 	bl	8002b9c <prvUnlockQueue>
	}
 8002d50:	bf00      	nop
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08e      	sub	sp, #56	; 0x38
 8002d5c:	af04      	add	r7, sp, #16
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10a      	bne.n	8002d82 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d70:	f383 8811 	msr	BASEPRI, r3
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	f3bf 8f4f 	dsb	sy
 8002d7c:	623b      	str	r3, [r7, #32]
}
 8002d7e:	bf00      	nop
 8002d80:	e7fe      	b.n	8002d80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10a      	bne.n	8002d9e <xTaskCreateStatic+0x46>
	__asm volatile
 8002d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8c:	f383 8811 	msr	BASEPRI, r3
 8002d90:	f3bf 8f6f 	isb	sy
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	61fb      	str	r3, [r7, #28]
}
 8002d9a:	bf00      	nop
 8002d9c:	e7fe      	b.n	8002d9c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d9e:	23cc      	movs	r3, #204	; 0xcc
 8002da0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	2bcc      	cmp	r3, #204	; 0xcc
 8002da6:	d00a      	beq.n	8002dbe <xTaskCreateStatic+0x66>
	__asm volatile
 8002da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dac:	f383 8811 	msr	BASEPRI, r3
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	f3bf 8f4f 	dsb	sy
 8002db8:	61bb      	str	r3, [r7, #24]
}
 8002dba:	bf00      	nop
 8002dbc:	e7fe      	b.n	8002dbc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002dbe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d01e      	beq.n	8002e04 <xTaskCreateStatic+0xac>
 8002dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d01b      	beq.n	8002e04 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	2202      	movs	r2, #2
 8002dda:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002dde:	2300      	movs	r3, #0
 8002de0:	9303      	str	r3, [sp, #12]
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	9302      	str	r3, [sp, #8]
 8002de6:	f107 0314 	add.w	r3, r7, #20
 8002dea:	9301      	str	r3, [sp, #4]
 8002dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	68b9      	ldr	r1, [r7, #8]
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f850 	bl	8002e9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002dfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dfe:	f000 f8f3 	bl	8002fe8 <prvAddNewTaskToReadyList>
 8002e02:	e001      	b.n	8002e08 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e08:	697b      	ldr	r3, [r7, #20]
	}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3728      	adds	r7, #40	; 0x28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b08c      	sub	sp, #48	; 0x30
 8002e16:	af04      	add	r7, sp, #16
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	603b      	str	r3, [r7, #0]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f001 fc5e 	bl	80046e8 <pvPortMalloc>
 8002e2c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00e      	beq.n	8002e52 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e34:	20cc      	movs	r0, #204	; 0xcc
 8002e36:	f001 fc57 	bl	80046e8 <pvPortMalloc>
 8002e3a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
 8002e48:	e005      	b.n	8002e56 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e4a:	6978      	ldr	r0, [r7, #20]
 8002e4c:	f001 fd18 	bl	8004880 <vPortFree>
 8002e50:	e001      	b.n	8002e56 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d017      	beq.n	8002e8c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e64:	88fa      	ldrh	r2, [r7, #6]
 8002e66:	2300      	movs	r3, #0
 8002e68:	9303      	str	r3, [sp, #12]
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	9302      	str	r3, [sp, #8]
 8002e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e70:	9301      	str	r3, [sp, #4]
 8002e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68b9      	ldr	r1, [r7, #8]
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f80e 	bl	8002e9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e80:	69f8      	ldr	r0, [r7, #28]
 8002e82:	f000 f8b1 	bl	8002fe8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e86:	2301      	movs	r3, #1
 8002e88:	61bb      	str	r3, [r7, #24]
 8002e8a:	e002      	b.n	8002e92 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e90:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e92:	69bb      	ldr	r3, [r7, #24]
	}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3720      	adds	r7, #32
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	21a5      	movs	r1, #165	; 0xa5
 8002eb6:	f001 fe35 	bl	8004b24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	f023 0307 	bic.w	r3, r3, #7
 8002ed2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee2:	f383 8811 	msr	BASEPRI, r3
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	617b      	str	r3, [r7, #20]
}
 8002ef0:	bf00      	nop
 8002ef2:	e7fe      	b.n	8002ef2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d01f      	beq.n	8002f3a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	e012      	b.n	8002f26 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	4413      	add	r3, r2
 8002f06:	7819      	ldrb	r1, [r3, #0]
 8002f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3334      	adds	r3, #52	; 0x34
 8002f10:	460a      	mov	r2, r1
 8002f12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	4413      	add	r3, r2
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d006      	beq.n	8002f2e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	3301      	adds	r3, #1
 8002f24:	61fb      	str	r3, [r7, #28]
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	2b1f      	cmp	r3, #31
 8002f2a:	d9e9      	bls.n	8002f00 <prvInitialiseNewTask+0x64>
 8002f2c:	e000      	b.n	8002f30 <prvInitialiseNewTask+0x94>
			{
				break;
 8002f2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8002f38:	e003      	b.n	8002f42 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f44:	2b37      	cmp	r3, #55	; 0x37
 8002f46:	d901      	bls.n	8002f4c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f48:	2337      	movs	r3, #55	; 0x37
 8002f4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f56:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8002f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f60:	3304      	adds	r3, #4
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff f978 	bl	8002258 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6a:	3318      	adds	r3, #24
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff f973 	bl	8002258 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9a:	3364      	adds	r3, #100	; 0x64
 8002f9c:	2260      	movs	r2, #96	; 0x60
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f001 fdbf 	bl	8004b24 <memset>
 8002fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa8:	4a0c      	ldr	r2, [pc, #48]	; (8002fdc <prvInitialiseNewTask+0x140>)
 8002faa:	669a      	str	r2, [r3, #104]	; 0x68
 8002fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fae:	4a0c      	ldr	r2, [pc, #48]	; (8002fe0 <prvInitialiseNewTask+0x144>)
 8002fb0:	66da      	str	r2, [r3, #108]	; 0x6c
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	4a0b      	ldr	r2, [pc, #44]	; (8002fe4 <prvInitialiseNewTask+0x148>)
 8002fb6:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	68f9      	ldr	r1, [r7, #12]
 8002fbc:	69b8      	ldr	r0, [r7, #24]
 8002fbe:	f001 f941 	bl	8004244 <pxPortInitialiseStack>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fd2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fd4:	bf00      	nop
 8002fd6:	3720      	adds	r7, #32
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	08004e14 	.word	0x08004e14
 8002fe0:	08004e34 	.word	0x08004e34
 8002fe4:	08004df4 	.word	0x08004df4

08002fe8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ff0:	f001 fa58 	bl	80044a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ff4:	4b2d      	ldr	r3, [pc, #180]	; (80030ac <prvAddNewTaskToReadyList+0xc4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	4a2c      	ldr	r2, [pc, #176]	; (80030ac <prvAddNewTaskToReadyList+0xc4>)
 8002ffc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002ffe:	4b2c      	ldr	r3, [pc, #176]	; (80030b0 <prvAddNewTaskToReadyList+0xc8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d109      	bne.n	800301a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003006:	4a2a      	ldr	r2, [pc, #168]	; (80030b0 <prvAddNewTaskToReadyList+0xc8>)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800300c:	4b27      	ldr	r3, [pc, #156]	; (80030ac <prvAddNewTaskToReadyList+0xc4>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d110      	bne.n	8003036 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003014:	f000 fc26 	bl	8003864 <prvInitialiseTaskLists>
 8003018:	e00d      	b.n	8003036 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800301a:	4b26      	ldr	r3, [pc, #152]	; (80030b4 <prvAddNewTaskToReadyList+0xcc>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d109      	bne.n	8003036 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003022:	4b23      	ldr	r3, [pc, #140]	; (80030b0 <prvAddNewTaskToReadyList+0xc8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	429a      	cmp	r2, r3
 800302e:	d802      	bhi.n	8003036 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003030:	4a1f      	ldr	r2, [pc, #124]	; (80030b0 <prvAddNewTaskToReadyList+0xc8>)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003036:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <prvAddNewTaskToReadyList+0xd0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	3301      	adds	r3, #1
 800303c:	4a1e      	ldr	r2, [pc, #120]	; (80030b8 <prvAddNewTaskToReadyList+0xd0>)
 800303e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003040:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <prvAddNewTaskToReadyList+0xd0>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800304c:	4b1b      	ldr	r3, [pc, #108]	; (80030bc <prvAddNewTaskToReadyList+0xd4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d903      	bls.n	800305c <prvAddNewTaskToReadyList+0x74>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	4a18      	ldr	r2, [pc, #96]	; (80030bc <prvAddNewTaskToReadyList+0xd4>)
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4a15      	ldr	r2, [pc, #84]	; (80030c0 <prvAddNewTaskToReadyList+0xd8>)
 800306a:	441a      	add	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3304      	adds	r3, #4
 8003070:	4619      	mov	r1, r3
 8003072:	4610      	mov	r0, r2
 8003074:	f7ff f8fd 	bl	8002272 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003078:	f001 fa44 	bl	8004504 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800307c:	4b0d      	ldr	r3, [pc, #52]	; (80030b4 <prvAddNewTaskToReadyList+0xcc>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00e      	beq.n	80030a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003084:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <prvAddNewTaskToReadyList+0xc8>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308e:	429a      	cmp	r2, r3
 8003090:	d207      	bcs.n	80030a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003092:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <prvAddNewTaskToReadyList+0xdc>)
 8003094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	20000aec 	.word	0x20000aec
 80030b0:	20000618 	.word	0x20000618
 80030b4:	20000af8 	.word	0x20000af8
 80030b8:	20000b08 	.word	0x20000b08
 80030bc:	20000af4 	.word	0x20000af4
 80030c0:	2000061c 	.word	0x2000061c
 80030c4:	e000ed04 	.word	0xe000ed04

080030c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d017      	beq.n	800310a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80030da:	4b13      	ldr	r3, [pc, #76]	; (8003128 <vTaskDelay+0x60>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <vTaskDelay+0x30>
	__asm volatile
 80030e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e6:	f383 8811 	msr	BASEPRI, r3
 80030ea:	f3bf 8f6f 	isb	sy
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	60bb      	str	r3, [r7, #8]
}
 80030f4:	bf00      	nop
 80030f6:	e7fe      	b.n	80030f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80030f8:	f000 f88a 	bl	8003210 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80030fc:	2100      	movs	r1, #0
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fcfe 	bl	8003b00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003104:	f000 f892 	bl	800322c <xTaskResumeAll>
 8003108:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d107      	bne.n	8003120 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <vTaskDelay+0x64>)
 8003112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003120:	bf00      	nop
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	20000b14 	.word	0x20000b14
 800312c:	e000ed04 	.word	0xe000ed04

08003130 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08a      	sub	sp, #40	; 0x28
 8003134:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003136:	2300      	movs	r3, #0
 8003138:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800313a:	2300      	movs	r3, #0
 800313c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800313e:	463a      	mov	r2, r7
 8003140:	1d39      	adds	r1, r7, #4
 8003142:	f107 0308 	add.w	r3, r7, #8
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff f832 	bl	80021b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800314c:	6839      	ldr	r1, [r7, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	9202      	str	r2, [sp, #8]
 8003154:	9301      	str	r3, [sp, #4]
 8003156:	2300      	movs	r3, #0
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	2300      	movs	r3, #0
 800315c:	460a      	mov	r2, r1
 800315e:	4924      	ldr	r1, [pc, #144]	; (80031f0 <vTaskStartScheduler+0xc0>)
 8003160:	4824      	ldr	r0, [pc, #144]	; (80031f4 <vTaskStartScheduler+0xc4>)
 8003162:	f7ff fdf9 	bl	8002d58 <xTaskCreateStatic>
 8003166:	4603      	mov	r3, r0
 8003168:	4a23      	ldr	r2, [pc, #140]	; (80031f8 <vTaskStartScheduler+0xc8>)
 800316a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800316c:	4b22      	ldr	r3, [pc, #136]	; (80031f8 <vTaskStartScheduler+0xc8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003174:	2301      	movs	r3, #1
 8003176:	617b      	str	r3, [r7, #20]
 8003178:	e001      	b.n	800317e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d102      	bne.n	800318a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003184:	f000 fd10 	bl	8003ba8 <xTimerCreateTimerTask>
 8003188:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d11b      	bne.n	80031c8 <vTaskStartScheduler+0x98>
	__asm volatile
 8003190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003194:	f383 8811 	msr	BASEPRI, r3
 8003198:	f3bf 8f6f 	isb	sy
 800319c:	f3bf 8f4f 	dsb	sy
 80031a0:	613b      	str	r3, [r7, #16]
}
 80031a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80031a4:	4b15      	ldr	r3, [pc, #84]	; (80031fc <vTaskStartScheduler+0xcc>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	3364      	adds	r3, #100	; 0x64
 80031aa:	4a15      	ldr	r2, [pc, #84]	; (8003200 <vTaskStartScheduler+0xd0>)
 80031ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80031ae:	4b15      	ldr	r3, [pc, #84]	; (8003204 <vTaskStartScheduler+0xd4>)
 80031b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80031b6:	4b14      	ldr	r3, [pc, #80]	; (8003208 <vTaskStartScheduler+0xd8>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80031bc:	4b13      	ldr	r3, [pc, #76]	; (800320c <vTaskStartScheduler+0xdc>)
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80031c2:	f001 f8cd 	bl	8004360 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80031c6:	e00e      	b.n	80031e6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031ce:	d10a      	bne.n	80031e6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80031d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d4:	f383 8811 	msr	BASEPRI, r3
 80031d8:	f3bf 8f6f 	isb	sy
 80031dc:	f3bf 8f4f 	dsb	sy
 80031e0:	60fb      	str	r3, [r7, #12]
}
 80031e2:	bf00      	nop
 80031e4:	e7fe      	b.n	80031e4 <vTaskStartScheduler+0xb4>
}
 80031e6:	bf00      	nop
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	08004d10 	.word	0x08004d10
 80031f4:	08003835 	.word	0x08003835
 80031f8:	20000b10 	.word	0x20000b10
 80031fc:	20000618 	.word	0x20000618
 8003200:	20000010 	.word	0x20000010
 8003204:	20000b0c 	.word	0x20000b0c
 8003208:	20000af8 	.word	0x20000af8
 800320c:	20000af0 	.word	0x20000af0

08003210 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003214:	4b04      	ldr	r3, [pc, #16]	; (8003228 <vTaskSuspendAll+0x18>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	3301      	adds	r3, #1
 800321a:	4a03      	ldr	r2, [pc, #12]	; (8003228 <vTaskSuspendAll+0x18>)
 800321c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800321e:	bf00      	nop
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	20000b14 	.word	0x20000b14

0800322c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003236:	2300      	movs	r3, #0
 8003238:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800323a:	4b42      	ldr	r3, [pc, #264]	; (8003344 <xTaskResumeAll+0x118>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10a      	bne.n	8003258 <xTaskResumeAll+0x2c>
	__asm volatile
 8003242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003246:	f383 8811 	msr	BASEPRI, r3
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	603b      	str	r3, [r7, #0]
}
 8003254:	bf00      	nop
 8003256:	e7fe      	b.n	8003256 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003258:	f001 f924 	bl	80044a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800325c:	4b39      	ldr	r3, [pc, #228]	; (8003344 <xTaskResumeAll+0x118>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3b01      	subs	r3, #1
 8003262:	4a38      	ldr	r2, [pc, #224]	; (8003344 <xTaskResumeAll+0x118>)
 8003264:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003266:	4b37      	ldr	r3, [pc, #220]	; (8003344 <xTaskResumeAll+0x118>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d162      	bne.n	8003334 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800326e:	4b36      	ldr	r3, [pc, #216]	; (8003348 <xTaskResumeAll+0x11c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d05e      	beq.n	8003334 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003276:	e02f      	b.n	80032d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003278:	4b34      	ldr	r3, [pc, #208]	; (800334c <xTaskResumeAll+0x120>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3318      	adds	r3, #24
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff f851 	bl	800232c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	3304      	adds	r3, #4
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff f84c 	bl	800232c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003298:	4b2d      	ldr	r3, [pc, #180]	; (8003350 <xTaskResumeAll+0x124>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d903      	bls.n	80032a8 <xTaskResumeAll+0x7c>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	4a2a      	ldr	r2, [pc, #168]	; (8003350 <xTaskResumeAll+0x124>)
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4a27      	ldr	r2, [pc, #156]	; (8003354 <xTaskResumeAll+0x128>)
 80032b6:	441a      	add	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	3304      	adds	r3, #4
 80032bc:	4619      	mov	r1, r3
 80032be:	4610      	mov	r0, r2
 80032c0:	f7fe ffd7 	bl	8002272 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c8:	4b23      	ldr	r3, [pc, #140]	; (8003358 <xTaskResumeAll+0x12c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d302      	bcc.n	80032d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80032d2:	4b22      	ldr	r3, [pc, #136]	; (800335c <xTaskResumeAll+0x130>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032d8:	4b1c      	ldr	r3, [pc, #112]	; (800334c <xTaskResumeAll+0x120>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1cb      	bne.n	8003278 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80032e6:	f000 fb5f 	bl	80039a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80032ea:	4b1d      	ldr	r3, [pc, #116]	; (8003360 <xTaskResumeAll+0x134>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d010      	beq.n	8003318 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80032f6:	f000 f847 	bl	8003388 <xTaskIncrementTick>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d002      	beq.n	8003306 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003300:	4b16      	ldr	r3, [pc, #88]	; (800335c <xTaskResumeAll+0x130>)
 8003302:	2201      	movs	r2, #1
 8003304:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3b01      	subs	r3, #1
 800330a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f1      	bne.n	80032f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003312:	4b13      	ldr	r3, [pc, #76]	; (8003360 <xTaskResumeAll+0x134>)
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003318:	4b10      	ldr	r3, [pc, #64]	; (800335c <xTaskResumeAll+0x130>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d009      	beq.n	8003334 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003320:	2301      	movs	r3, #1
 8003322:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003324:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <xTaskResumeAll+0x138>)
 8003326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003334:	f001 f8e6 	bl	8004504 <vPortExitCritical>

	return xAlreadyYielded;
 8003338:	68bb      	ldr	r3, [r7, #8]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20000b14 	.word	0x20000b14
 8003348:	20000aec 	.word	0x20000aec
 800334c:	20000aac 	.word	0x20000aac
 8003350:	20000af4 	.word	0x20000af4
 8003354:	2000061c 	.word	0x2000061c
 8003358:	20000618 	.word	0x20000618
 800335c:	20000b00 	.word	0x20000b00
 8003360:	20000afc 	.word	0x20000afc
 8003364:	e000ed04 	.word	0xe000ed04

08003368 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800336e:	4b05      	ldr	r3, [pc, #20]	; (8003384 <xTaskGetTickCount+0x1c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003374:	687b      	ldr	r3, [r7, #4]
}
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	20000af0 	.word	0x20000af0

08003388 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003392:	4b4f      	ldr	r3, [pc, #316]	; (80034d0 <xTaskIncrementTick+0x148>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f040 808f 	bne.w	80034ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800339c:	4b4d      	ldr	r3, [pc, #308]	; (80034d4 <xTaskIncrementTick+0x14c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	3301      	adds	r3, #1
 80033a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80033a4:	4a4b      	ldr	r2, [pc, #300]	; (80034d4 <xTaskIncrementTick+0x14c>)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d120      	bne.n	80033f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80033b0:	4b49      	ldr	r3, [pc, #292]	; (80034d8 <xTaskIncrementTick+0x150>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80033ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033be:	f383 8811 	msr	BASEPRI, r3
 80033c2:	f3bf 8f6f 	isb	sy
 80033c6:	f3bf 8f4f 	dsb	sy
 80033ca:	603b      	str	r3, [r7, #0]
}
 80033cc:	bf00      	nop
 80033ce:	e7fe      	b.n	80033ce <xTaskIncrementTick+0x46>
 80033d0:	4b41      	ldr	r3, [pc, #260]	; (80034d8 <xTaskIncrementTick+0x150>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	4b41      	ldr	r3, [pc, #260]	; (80034dc <xTaskIncrementTick+0x154>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a3f      	ldr	r2, [pc, #252]	; (80034d8 <xTaskIncrementTick+0x150>)
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	4a3f      	ldr	r2, [pc, #252]	; (80034dc <xTaskIncrementTick+0x154>)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	4b3e      	ldr	r3, [pc, #248]	; (80034e0 <xTaskIncrementTick+0x158>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3301      	adds	r3, #1
 80033ea:	4a3d      	ldr	r2, [pc, #244]	; (80034e0 <xTaskIncrementTick+0x158>)
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	f000 fadb 	bl	80039a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80033f2:	4b3c      	ldr	r3, [pc, #240]	; (80034e4 <xTaskIncrementTick+0x15c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d349      	bcc.n	8003490 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033fc:	4b36      	ldr	r3, [pc, #216]	; (80034d8 <xTaskIncrementTick+0x150>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d104      	bne.n	8003410 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003406:	4b37      	ldr	r3, [pc, #220]	; (80034e4 <xTaskIncrementTick+0x15c>)
 8003408:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800340c:	601a      	str	r2, [r3, #0]
					break;
 800340e:	e03f      	b.n	8003490 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003410:	4b31      	ldr	r3, [pc, #196]	; (80034d8 <xTaskIncrementTick+0x150>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	429a      	cmp	r2, r3
 8003426:	d203      	bcs.n	8003430 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003428:	4a2e      	ldr	r2, [pc, #184]	; (80034e4 <xTaskIncrementTick+0x15c>)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800342e:	e02f      	b.n	8003490 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	3304      	adds	r3, #4
 8003434:	4618      	mov	r0, r3
 8003436:	f7fe ff79 	bl	800232c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343e:	2b00      	cmp	r3, #0
 8003440:	d004      	beq.n	800344c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	3318      	adds	r3, #24
 8003446:	4618      	mov	r0, r3
 8003448:	f7fe ff70 	bl	800232c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003450:	4b25      	ldr	r3, [pc, #148]	; (80034e8 <xTaskIncrementTick+0x160>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d903      	bls.n	8003460 <xTaskIncrementTick+0xd8>
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345c:	4a22      	ldr	r2, [pc, #136]	; (80034e8 <xTaskIncrementTick+0x160>)
 800345e:	6013      	str	r3, [r2, #0]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4a1f      	ldr	r2, [pc, #124]	; (80034ec <xTaskIncrementTick+0x164>)
 800346e:	441a      	add	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	3304      	adds	r3, #4
 8003474:	4619      	mov	r1, r3
 8003476:	4610      	mov	r0, r2
 8003478:	f7fe fefb 	bl	8002272 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003480:	4b1b      	ldr	r3, [pc, #108]	; (80034f0 <xTaskIncrementTick+0x168>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	429a      	cmp	r2, r3
 8003488:	d3b8      	bcc.n	80033fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800348a:	2301      	movs	r3, #1
 800348c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800348e:	e7b5      	b.n	80033fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003490:	4b17      	ldr	r3, [pc, #92]	; (80034f0 <xTaskIncrementTick+0x168>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003496:	4915      	ldr	r1, [pc, #84]	; (80034ec <xTaskIncrementTick+0x164>)
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d901      	bls.n	80034ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80034a8:	2301      	movs	r3, #1
 80034aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80034ac:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <xTaskIncrementTick+0x16c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d007      	beq.n	80034c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80034b4:	2301      	movs	r3, #1
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	e004      	b.n	80034c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80034ba:	4b0f      	ldr	r3, [pc, #60]	; (80034f8 <xTaskIncrementTick+0x170>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	3301      	adds	r3, #1
 80034c0:	4a0d      	ldr	r2, [pc, #52]	; (80034f8 <xTaskIncrementTick+0x170>)
 80034c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80034c4:	697b      	ldr	r3, [r7, #20]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	20000b14 	.word	0x20000b14
 80034d4:	20000af0 	.word	0x20000af0
 80034d8:	20000aa4 	.word	0x20000aa4
 80034dc:	20000aa8 	.word	0x20000aa8
 80034e0:	20000b04 	.word	0x20000b04
 80034e4:	20000b0c 	.word	0x20000b0c
 80034e8:	20000af4 	.word	0x20000af4
 80034ec:	2000061c 	.word	0x2000061c
 80034f0:	20000618 	.word	0x20000618
 80034f4:	20000b00 	.word	0x20000b00
 80034f8:	20000afc 	.word	0x20000afc

080034fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003502:	4b2a      	ldr	r3, [pc, #168]	; (80035ac <vTaskSwitchContext+0xb0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800350a:	4b29      	ldr	r3, [pc, #164]	; (80035b0 <vTaskSwitchContext+0xb4>)
 800350c:	2201      	movs	r2, #1
 800350e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003510:	e046      	b.n	80035a0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003512:	4b27      	ldr	r3, [pc, #156]	; (80035b0 <vTaskSwitchContext+0xb4>)
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003518:	4b26      	ldr	r3, [pc, #152]	; (80035b4 <vTaskSwitchContext+0xb8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	e010      	b.n	8003542 <vTaskSwitchContext+0x46>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10a      	bne.n	800353c <vTaskSwitchContext+0x40>
	__asm volatile
 8003526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352a:	f383 8811 	msr	BASEPRI, r3
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	f3bf 8f4f 	dsb	sy
 8003536:	607b      	str	r3, [r7, #4]
}
 8003538:	bf00      	nop
 800353a:	e7fe      	b.n	800353a <vTaskSwitchContext+0x3e>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	3b01      	subs	r3, #1
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	491d      	ldr	r1, [pc, #116]	; (80035b8 <vTaskSwitchContext+0xbc>)
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0e4      	beq.n	8003520 <vTaskSwitchContext+0x24>
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4a15      	ldr	r2, [pc, #84]	; (80035b8 <vTaskSwitchContext+0xbc>)
 8003562:	4413      	add	r3, r2
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	605a      	str	r2, [r3, #4]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	3308      	adds	r3, #8
 8003578:	429a      	cmp	r2, r3
 800357a:	d104      	bne.n	8003586 <vTaskSwitchContext+0x8a>
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4a0b      	ldr	r2, [pc, #44]	; (80035bc <vTaskSwitchContext+0xc0>)
 800358e:	6013      	str	r3, [r2, #0]
 8003590:	4a08      	ldr	r2, [pc, #32]	; (80035b4 <vTaskSwitchContext+0xb8>)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003596:	4b09      	ldr	r3, [pc, #36]	; (80035bc <vTaskSwitchContext+0xc0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3364      	adds	r3, #100	; 0x64
 800359c:	4a08      	ldr	r2, [pc, #32]	; (80035c0 <vTaskSwitchContext+0xc4>)
 800359e:	6013      	str	r3, [r2, #0]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	20000b14 	.word	0x20000b14
 80035b0:	20000b00 	.word	0x20000b00
 80035b4:	20000af4 	.word	0x20000af4
 80035b8:	2000061c 	.word	0x2000061c
 80035bc:	20000618 	.word	0x20000618
 80035c0:	20000010 	.word	0x20000010

080035c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10a      	bne.n	80035ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	60fb      	str	r3, [r7, #12]
}
 80035e6:	bf00      	nop
 80035e8:	e7fe      	b.n	80035e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035ea:	4b07      	ldr	r3, [pc, #28]	; (8003608 <vTaskPlaceOnEventList+0x44>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	3318      	adds	r3, #24
 80035f0:	4619      	mov	r1, r3
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fe fe61 	bl	80022ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80035f8:	2101      	movs	r1, #1
 80035fa:	6838      	ldr	r0, [r7, #0]
 80035fc:	f000 fa80 	bl	8003b00 <prvAddCurrentTaskToDelayedList>
}
 8003600:	bf00      	nop
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	20000618 	.word	0x20000618

0800360c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10a      	bne.n	8003634 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800361e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003622:	f383 8811 	msr	BASEPRI, r3
 8003626:	f3bf 8f6f 	isb	sy
 800362a:	f3bf 8f4f 	dsb	sy
 800362e:	617b      	str	r3, [r7, #20]
}
 8003630:	bf00      	nop
 8003632:	e7fe      	b.n	8003632 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003634:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <vTaskPlaceOnEventListRestricted+0x54>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	3318      	adds	r3, #24
 800363a:	4619      	mov	r1, r3
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f7fe fe18 	bl	8002272 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800364c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	68b8      	ldr	r0, [r7, #8]
 8003652:	f000 fa55 	bl	8003b00 <prvAddCurrentTaskToDelayedList>
	}
 8003656:	bf00      	nop
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	20000618 	.word	0x20000618

08003664 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10a      	bne.n	8003690 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800367a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367e:	f383 8811 	msr	BASEPRI, r3
 8003682:	f3bf 8f6f 	isb	sy
 8003686:	f3bf 8f4f 	dsb	sy
 800368a:	60fb      	str	r3, [r7, #12]
}
 800368c:	bf00      	nop
 800368e:	e7fe      	b.n	800368e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	3318      	adds	r3, #24
 8003694:	4618      	mov	r0, r3
 8003696:	f7fe fe49 	bl	800232c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800369a:	4b1e      	ldr	r3, [pc, #120]	; (8003714 <xTaskRemoveFromEventList+0xb0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d11d      	bne.n	80036de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	3304      	adds	r3, #4
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fe fe40 	bl	800232c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b0:	4b19      	ldr	r3, [pc, #100]	; (8003718 <xTaskRemoveFromEventList+0xb4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d903      	bls.n	80036c0 <xTaskRemoveFromEventList+0x5c>
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	4a16      	ldr	r2, [pc, #88]	; (8003718 <xTaskRemoveFromEventList+0xb4>)
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4a13      	ldr	r2, [pc, #76]	; (800371c <xTaskRemoveFromEventList+0xb8>)
 80036ce:	441a      	add	r2, r3
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	3304      	adds	r3, #4
 80036d4:	4619      	mov	r1, r3
 80036d6:	4610      	mov	r0, r2
 80036d8:	f7fe fdcb 	bl	8002272 <vListInsertEnd>
 80036dc:	e005      	b.n	80036ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	3318      	adds	r3, #24
 80036e2:	4619      	mov	r1, r3
 80036e4:	480e      	ldr	r0, [pc, #56]	; (8003720 <xTaskRemoveFromEventList+0xbc>)
 80036e6:	f7fe fdc4 	bl	8002272 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ee:	4b0d      	ldr	r3, [pc, #52]	; (8003724 <xTaskRemoveFromEventList+0xc0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d905      	bls.n	8003704 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80036f8:	2301      	movs	r3, #1
 80036fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80036fc:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <xTaskRemoveFromEventList+0xc4>)
 80036fe:	2201      	movs	r2, #1
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	e001      	b.n	8003708 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003708:	697b      	ldr	r3, [r7, #20]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20000b14 	.word	0x20000b14
 8003718:	20000af4 	.word	0x20000af4
 800371c:	2000061c 	.word	0x2000061c
 8003720:	20000aac 	.word	0x20000aac
 8003724:	20000618 	.word	0x20000618
 8003728:	20000b00 	.word	0x20000b00

0800372c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003734:	4b06      	ldr	r3, [pc, #24]	; (8003750 <vTaskInternalSetTimeOutState+0x24>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <vTaskInternalSetTimeOutState+0x28>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	605a      	str	r2, [r3, #4]
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	20000b04 	.word	0x20000b04
 8003754:	20000af0 	.word	0x20000af0

08003758 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10a      	bne.n	800377e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376c:	f383 8811 	msr	BASEPRI, r3
 8003770:	f3bf 8f6f 	isb	sy
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	613b      	str	r3, [r7, #16]
}
 800377a:	bf00      	nop
 800377c:	e7fe      	b.n	800377c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10a      	bne.n	800379a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	60fb      	str	r3, [r7, #12]
}
 8003796:	bf00      	nop
 8003798:	e7fe      	b.n	8003798 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800379a:	f000 fe83 	bl	80044a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800379e:	4b1d      	ldr	r3, [pc, #116]	; (8003814 <xTaskCheckForTimeOut+0xbc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037b6:	d102      	bne.n	80037be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80037b8:	2300      	movs	r3, #0
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	e023      	b.n	8003806 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	4b15      	ldr	r3, [pc, #84]	; (8003818 <xTaskCheckForTimeOut+0xc0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d007      	beq.n	80037da <xTaskCheckForTimeOut+0x82>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d302      	bcc.n	80037da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80037d4:	2301      	movs	r3, #1
 80037d6:	61fb      	str	r3, [r7, #28]
 80037d8:	e015      	b.n	8003806 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d20b      	bcs.n	80037fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	1ad2      	subs	r2, r2, r3
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff ff9b 	bl	800372c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80037f6:	2300      	movs	r3, #0
 80037f8:	61fb      	str	r3, [r7, #28]
 80037fa:	e004      	b.n	8003806 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003802:	2301      	movs	r3, #1
 8003804:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003806:	f000 fe7d 	bl	8004504 <vPortExitCritical>

	return xReturn;
 800380a:	69fb      	ldr	r3, [r7, #28]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3720      	adds	r7, #32
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	20000af0 	.word	0x20000af0
 8003818:	20000b04 	.word	0x20000b04

0800381c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003820:	4b03      	ldr	r3, [pc, #12]	; (8003830 <vTaskMissedYield+0x14>)
 8003822:	2201      	movs	r2, #1
 8003824:	601a      	str	r2, [r3, #0]
}
 8003826:	bf00      	nop
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	20000b00 	.word	0x20000b00

08003834 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800383c:	f000 f852 	bl	80038e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003840:	4b06      	ldr	r3, [pc, #24]	; (800385c <prvIdleTask+0x28>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d9f9      	bls.n	800383c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003848:	4b05      	ldr	r3, [pc, #20]	; (8003860 <prvIdleTask+0x2c>)
 800384a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003858:	e7f0      	b.n	800383c <prvIdleTask+0x8>
 800385a:	bf00      	nop
 800385c:	2000061c 	.word	0x2000061c
 8003860:	e000ed04 	.word	0xe000ed04

08003864 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800386a:	2300      	movs	r3, #0
 800386c:	607b      	str	r3, [r7, #4]
 800386e:	e00c      	b.n	800388a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4a12      	ldr	r2, [pc, #72]	; (80038c4 <prvInitialiseTaskLists+0x60>)
 800387c:	4413      	add	r3, r2
 800387e:	4618      	mov	r0, r3
 8003880:	f7fe fcca 	bl	8002218 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3301      	adds	r3, #1
 8003888:	607b      	str	r3, [r7, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b37      	cmp	r3, #55	; 0x37
 800388e:	d9ef      	bls.n	8003870 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003890:	480d      	ldr	r0, [pc, #52]	; (80038c8 <prvInitialiseTaskLists+0x64>)
 8003892:	f7fe fcc1 	bl	8002218 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003896:	480d      	ldr	r0, [pc, #52]	; (80038cc <prvInitialiseTaskLists+0x68>)
 8003898:	f7fe fcbe 	bl	8002218 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800389c:	480c      	ldr	r0, [pc, #48]	; (80038d0 <prvInitialiseTaskLists+0x6c>)
 800389e:	f7fe fcbb 	bl	8002218 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80038a2:	480c      	ldr	r0, [pc, #48]	; (80038d4 <prvInitialiseTaskLists+0x70>)
 80038a4:	f7fe fcb8 	bl	8002218 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80038a8:	480b      	ldr	r0, [pc, #44]	; (80038d8 <prvInitialiseTaskLists+0x74>)
 80038aa:	f7fe fcb5 	bl	8002218 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80038ae:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <prvInitialiseTaskLists+0x78>)
 80038b0:	4a05      	ldr	r2, [pc, #20]	; (80038c8 <prvInitialiseTaskLists+0x64>)
 80038b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80038b4:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <prvInitialiseTaskLists+0x7c>)
 80038b6:	4a05      	ldr	r2, [pc, #20]	; (80038cc <prvInitialiseTaskLists+0x68>)
 80038b8:	601a      	str	r2, [r3, #0]
}
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	2000061c 	.word	0x2000061c
 80038c8:	20000a7c 	.word	0x20000a7c
 80038cc:	20000a90 	.word	0x20000a90
 80038d0:	20000aac 	.word	0x20000aac
 80038d4:	20000ac0 	.word	0x20000ac0
 80038d8:	20000ad8 	.word	0x20000ad8
 80038dc:	20000aa4 	.word	0x20000aa4
 80038e0:	20000aa8 	.word	0x20000aa8

080038e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038ea:	e019      	b.n	8003920 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80038ec:	f000 fdda 	bl	80044a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038f0:	4b10      	ldr	r3, [pc, #64]	; (8003934 <prvCheckTasksWaitingTermination+0x50>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3304      	adds	r3, #4
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fe fd15 	bl	800232c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003902:	4b0d      	ldr	r3, [pc, #52]	; (8003938 <prvCheckTasksWaitingTermination+0x54>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	3b01      	subs	r3, #1
 8003908:	4a0b      	ldr	r2, [pc, #44]	; (8003938 <prvCheckTasksWaitingTermination+0x54>)
 800390a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800390c:	4b0b      	ldr	r3, [pc, #44]	; (800393c <prvCheckTasksWaitingTermination+0x58>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3b01      	subs	r3, #1
 8003912:	4a0a      	ldr	r2, [pc, #40]	; (800393c <prvCheckTasksWaitingTermination+0x58>)
 8003914:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003916:	f000 fdf5 	bl	8004504 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f810 	bl	8003940 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <prvCheckTasksWaitingTermination+0x58>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e1      	bne.n	80038ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003928:	bf00      	nop
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20000ac0 	.word	0x20000ac0
 8003938:	20000aec 	.word	0x20000aec
 800393c:	20000ad4 	.word	0x20000ad4

08003940 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3364      	adds	r3, #100	; 0x64
 800394c:	4618      	mov	r0, r3
 800394e:	f001 f8ff 	bl	8004b50 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8003958:	2b00      	cmp	r3, #0
 800395a:	d108      	bne.n	800396e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	4618      	mov	r0, r3
 8003962:	f000 ff8d 	bl	8004880 <vPortFree>
				vPortFree( pxTCB );
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 ff8a 	bl	8004880 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800396c:	e018      	b.n	80039a0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8003974:	2b01      	cmp	r3, #1
 8003976:	d103      	bne.n	8003980 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 ff81 	bl	8004880 <vPortFree>
	}
 800397e:	e00f      	b.n	80039a0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8003986:	2b02      	cmp	r3, #2
 8003988:	d00a      	beq.n	80039a0 <prvDeleteTCB+0x60>
	__asm volatile
 800398a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	60fb      	str	r3, [r7, #12]
}
 800399c:	bf00      	nop
 800399e:	e7fe      	b.n	800399e <prvDeleteTCB+0x5e>
	}
 80039a0:	bf00      	nop
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039ae:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <prvResetNextTaskUnblockTime+0x38>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d104      	bne.n	80039c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80039b8:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <prvResetNextTaskUnblockTime+0x3c>)
 80039ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80039c0:	e008      	b.n	80039d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039c2:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <prvResetNextTaskUnblockTime+0x38>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	4a04      	ldr	r2, [pc, #16]	; (80039e4 <prvResetNextTaskUnblockTime+0x3c>)
 80039d2:	6013      	str	r3, [r2, #0]
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	20000aa4 	.word	0x20000aa4
 80039e4:	20000b0c 	.word	0x20000b0c

080039e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80039ee:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <xTaskGetSchedulerState+0x34>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d102      	bne.n	80039fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80039f6:	2301      	movs	r3, #1
 80039f8:	607b      	str	r3, [r7, #4]
 80039fa:	e008      	b.n	8003a0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039fc:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <xTaskGetSchedulerState+0x38>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d102      	bne.n	8003a0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003a04:	2302      	movs	r3, #2
 8003a06:	607b      	str	r3, [r7, #4]
 8003a08:	e001      	b.n	8003a0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003a0e:	687b      	ldr	r3, [r7, #4]
	}
 8003a10:	4618      	mov	r0, r3
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	20000af8 	.word	0x20000af8
 8003a20:	20000b14 	.word	0x20000b14

08003a24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d056      	beq.n	8003ae8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003a3a:	4b2e      	ldr	r3, [pc, #184]	; (8003af4 <xTaskPriorityDisinherit+0xd0>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d00a      	beq.n	8003a5a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	60fb      	str	r3, [r7, #12]
}
 8003a56:	bf00      	nop
 8003a58:	e7fe      	b.n	8003a58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10a      	bne.n	8003a78 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a66:	f383 8811 	msr	BASEPRI, r3
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	60bb      	str	r3, [r7, #8]
}
 8003a74:	bf00      	nop
 8003a76:	e7fe      	b.n	8003a76 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a7c:	1e5a      	subs	r2, r3, #1
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d02c      	beq.n	8003ae8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d128      	bne.n	8003ae8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe fc46 	bl	800232c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab8:	4b0f      	ldr	r3, [pc, #60]	; (8003af8 <xTaskPriorityDisinherit+0xd4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d903      	bls.n	8003ac8 <xTaskPriorityDisinherit+0xa4>
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	4a0c      	ldr	r2, [pc, #48]	; (8003af8 <xTaskPriorityDisinherit+0xd4>)
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003acc:	4613      	mov	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4a09      	ldr	r2, [pc, #36]	; (8003afc <xTaskPriorityDisinherit+0xd8>)
 8003ad6:	441a      	add	r2, r3
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	3304      	adds	r3, #4
 8003adc:	4619      	mov	r1, r3
 8003ade:	4610      	mov	r0, r2
 8003ae0:	f7fe fbc7 	bl	8002272 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ae8:	697b      	ldr	r3, [r7, #20]
	}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000618 	.word	0x20000618
 8003af8:	20000af4 	.word	0x20000af4
 8003afc:	2000061c 	.word	0x2000061c

08003b00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b0a:	4b21      	ldr	r3, [pc, #132]	; (8003b90 <prvAddCurrentTaskToDelayedList+0x90>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b10:	4b20      	ldr	r3, [pc, #128]	; (8003b94 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3304      	adds	r3, #4
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fe fc08 	bl	800232c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b22:	d10a      	bne.n	8003b3a <prvAddCurrentTaskToDelayedList+0x3a>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d007      	beq.n	8003b3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b2a:	4b1a      	ldr	r3, [pc, #104]	; (8003b94 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	4619      	mov	r1, r3
 8003b32:	4819      	ldr	r0, [pc, #100]	; (8003b98 <prvAddCurrentTaskToDelayedList+0x98>)
 8003b34:	f7fe fb9d 	bl	8002272 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b38:	e026      	b.n	8003b88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4413      	add	r3, r2
 8003b40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b42:	4b14      	ldr	r3, [pc, #80]	; (8003b94 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d209      	bcs.n	8003b66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b52:	4b12      	ldr	r3, [pc, #72]	; (8003b9c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4610      	mov	r0, r2
 8003b60:	f7fe fbab 	bl	80022ba <vListInsert>
}
 8003b64:	e010      	b.n	8003b88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b66:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	4b0a      	ldr	r3, [pc, #40]	; (8003b94 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3304      	adds	r3, #4
 8003b70:	4619      	mov	r1, r3
 8003b72:	4610      	mov	r0, r2
 8003b74:	f7fe fba1 	bl	80022ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b78:	4b0a      	ldr	r3, [pc, #40]	; (8003ba4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d202      	bcs.n	8003b88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003b82:	4a08      	ldr	r2, [pc, #32]	; (8003ba4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	6013      	str	r3, [r2, #0]
}
 8003b88:	bf00      	nop
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	20000af0 	.word	0x20000af0
 8003b94:	20000618 	.word	0x20000618
 8003b98:	20000ad8 	.word	0x20000ad8
 8003b9c:	20000aa8 	.word	0x20000aa8
 8003ba0:	20000aa4 	.word	0x20000aa4
 8003ba4:	20000b0c 	.word	0x20000b0c

08003ba8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08a      	sub	sp, #40	; 0x28
 8003bac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003bb2:	f000 fb07 	bl	80041c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003bb6:	4b1c      	ldr	r3, [pc, #112]	; (8003c28 <xTimerCreateTimerTask+0x80>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d021      	beq.n	8003c02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003bc6:	1d3a      	adds	r2, r7, #4
 8003bc8:	f107 0108 	add.w	r1, r7, #8
 8003bcc:	f107 030c 	add.w	r3, r7, #12
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fe fb07 	bl	80021e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	9202      	str	r2, [sp, #8]
 8003bde:	9301      	str	r3, [sp, #4]
 8003be0:	2302      	movs	r3, #2
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	2300      	movs	r3, #0
 8003be6:	460a      	mov	r2, r1
 8003be8:	4910      	ldr	r1, [pc, #64]	; (8003c2c <xTimerCreateTimerTask+0x84>)
 8003bea:	4811      	ldr	r0, [pc, #68]	; (8003c30 <xTimerCreateTimerTask+0x88>)
 8003bec:	f7ff f8b4 	bl	8002d58 <xTaskCreateStatic>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	4a10      	ldr	r2, [pc, #64]	; (8003c34 <xTimerCreateTimerTask+0x8c>)
 8003bf4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003bf6:	4b0f      	ldr	r3, [pc, #60]	; (8003c34 <xTimerCreateTimerTask+0x8c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10a      	bne.n	8003c1e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0c:	f383 8811 	msr	BASEPRI, r3
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	613b      	str	r3, [r7, #16]
}
 8003c1a:	bf00      	nop
 8003c1c:	e7fe      	b.n	8003c1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003c1e:	697b      	ldr	r3, [r7, #20]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20000b48 	.word	0x20000b48
 8003c2c:	08004d18 	.word	0x08004d18
 8003c30:	08003d6d 	.word	0x08003d6d
 8003c34:	20000b4c 	.word	0x20000b4c

08003c38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08a      	sub	sp, #40	; 0x28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10a      	bne.n	8003c66 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c54:	f383 8811 	msr	BASEPRI, r3
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	623b      	str	r3, [r7, #32]
}
 8003c62:	bf00      	nop
 8003c64:	e7fe      	b.n	8003c64 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003c66:	4b1a      	ldr	r3, [pc, #104]	; (8003cd0 <xTimerGenericCommand+0x98>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d02a      	beq.n	8003cc4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b05      	cmp	r3, #5
 8003c7e:	dc18      	bgt.n	8003cb2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003c80:	f7ff feb2 	bl	80039e8 <xTaskGetSchedulerState>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d109      	bne.n	8003c9e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003c8a:	4b11      	ldr	r3, [pc, #68]	; (8003cd0 <xTimerGenericCommand+0x98>)
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	f107 0110 	add.w	r1, r7, #16
 8003c92:	2300      	movs	r3, #0
 8003c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c96:	f7fe fc77 	bl	8002588 <xQueueGenericSend>
 8003c9a:	6278      	str	r0, [r7, #36]	; 0x24
 8003c9c:	e012      	b.n	8003cc4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003c9e:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <xTimerGenericCommand+0x98>)
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	f107 0110 	add.w	r1, r7, #16
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f7fe fc6d 	bl	8002588 <xQueueGenericSend>
 8003cae:	6278      	str	r0, [r7, #36]	; 0x24
 8003cb0:	e008      	b.n	8003cc4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003cb2:	4b07      	ldr	r3, [pc, #28]	; (8003cd0 <xTimerGenericCommand+0x98>)
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	f107 0110 	add.w	r1, r7, #16
 8003cba:	2300      	movs	r3, #0
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	f7fe fd61 	bl	8002784 <xQueueGenericSendFromISR>
 8003cc2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3728      	adds	r7, #40	; 0x28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20000b48 	.word	0x20000b48

08003cd4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cde:	4b22      	ldr	r3, [pc, #136]	; (8003d68 <prvProcessExpiredTimer+0x94>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	3304      	adds	r3, #4
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fe fb1d 	bl	800232c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d022      	beq.n	8003d46 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	699a      	ldr	r2, [r3, #24]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	18d1      	adds	r1, r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	6978      	ldr	r0, [r7, #20]
 8003d0e:	f000 f8d1 	bl	8003eb4 <prvInsertTimerInActiveList>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d01f      	beq.n	8003d58 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d18:	2300      	movs	r3, #0
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	2100      	movs	r1, #0
 8003d22:	6978      	ldr	r0, [r7, #20]
 8003d24:	f7ff ff88 	bl	8003c38 <xTimerGenericCommand>
 8003d28:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d113      	bne.n	8003d58 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d34:	f383 8811 	msr	BASEPRI, r3
 8003d38:	f3bf 8f6f 	isb	sy
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	60fb      	str	r3, [r7, #12]
}
 8003d42:	bf00      	nop
 8003d44:	e7fe      	b.n	8003d44 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d4c:	f023 0301 	bic.w	r3, r3, #1
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	6978      	ldr	r0, [r7, #20]
 8003d5e:	4798      	blx	r3
}
 8003d60:	bf00      	nop
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	20000b40 	.word	0x20000b40

08003d6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d74:	f107 0308 	add.w	r3, r7, #8
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 f857 	bl	8003e2c <prvGetNextExpireTime>
 8003d7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	4619      	mov	r1, r3
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 f803 	bl	8003d90 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003d8a:	f000 f8d5 	bl	8003f38 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d8e:	e7f1      	b.n	8003d74 <prvTimerTask+0x8>

08003d90 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003d9a:	f7ff fa39 	bl	8003210 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d9e:	f107 0308 	add.w	r3, r7, #8
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 f866 	bl	8003e74 <prvSampleTimeNow>
 8003da8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d130      	bne.n	8003e12 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10a      	bne.n	8003dcc <prvProcessTimerOrBlockTask+0x3c>
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d806      	bhi.n	8003dcc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003dbe:	f7ff fa35 	bl	800322c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003dc2:	68f9      	ldr	r1, [r7, #12]
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff ff85 	bl	8003cd4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003dca:	e024      	b.n	8003e16 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d008      	beq.n	8003de4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003dd2:	4b13      	ldr	r3, [pc, #76]	; (8003e20 <prvProcessTimerOrBlockTask+0x90>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <prvProcessTimerOrBlockTask+0x50>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e000      	b.n	8003de2 <prvProcessTimerOrBlockTask+0x52>
 8003de0:	2300      	movs	r3, #0
 8003de2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003de4:	4b0f      	ldr	r3, [pc, #60]	; (8003e24 <prvProcessTimerOrBlockTask+0x94>)
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	4619      	mov	r1, r3
 8003df2:	f7fe ff7d 	bl	8002cf0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003df6:	f7ff fa19 	bl	800322c <xTaskResumeAll>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10a      	bne.n	8003e16 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003e00:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <prvProcessTimerOrBlockTask+0x98>)
 8003e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	f3bf 8f6f 	isb	sy
}
 8003e10:	e001      	b.n	8003e16 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003e12:	f7ff fa0b 	bl	800322c <xTaskResumeAll>
}
 8003e16:	bf00      	nop
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20000b44 	.word	0x20000b44
 8003e24:	20000b48 	.word	0x20000b48
 8003e28:	e000ed04 	.word	0xe000ed04

08003e2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e34:	4b0e      	ldr	r3, [pc, #56]	; (8003e70 <prvGetNextExpireTime+0x44>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <prvGetNextExpireTime+0x16>
 8003e3e:	2201      	movs	r2, #1
 8003e40:	e000      	b.n	8003e44 <prvGetNextExpireTime+0x18>
 8003e42:	2200      	movs	r2, #0
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d105      	bne.n	8003e5c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e50:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <prvGetNextExpireTime+0x44>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	e001      	b.n	8003e60 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003e60:	68fb      	ldr	r3, [r7, #12]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	20000b40 	.word	0x20000b40

08003e74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003e7c:	f7ff fa74 	bl	8003368 <xTaskGetTickCount>
 8003e80:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003e82:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <prvSampleTimeNow+0x3c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d205      	bcs.n	8003e98 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003e8c:	f000 f936 	bl	80040fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	e002      	b.n	8003e9e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003e9e:	4a04      	ldr	r2, [pc, #16]	; (8003eb0 <prvSampleTimeNow+0x3c>)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	20000b50 	.word	0x20000b50

08003eb4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d812      	bhi.n	8003f00 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	1ad2      	subs	r2, r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d302      	bcc.n	8003eee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	e01b      	b.n	8003f26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003eee:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <prvInsertTimerInActiveList+0x7c>)
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4610      	mov	r0, r2
 8003efa:	f7fe f9de 	bl	80022ba <vListInsert>
 8003efe:	e012      	b.n	8003f26 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d206      	bcs.n	8003f16 <prvInsertTimerInActiveList+0x62>
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d302      	bcc.n	8003f16 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003f10:	2301      	movs	r3, #1
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	e007      	b.n	8003f26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f16:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <prvInsertTimerInActiveList+0x80>)
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4610      	mov	r0, r2
 8003f22:	f7fe f9ca 	bl	80022ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003f26:	697b      	ldr	r3, [r7, #20]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3718      	adds	r7, #24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	20000b44 	.word	0x20000b44
 8003f34:	20000b40 	.word	0x20000b40

08003f38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08e      	sub	sp, #56	; 0x38
 8003f3c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f3e:	e0ca      	b.n	80040d6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	da18      	bge.n	8003f78 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003f46:	1d3b      	adds	r3, r7, #4
 8003f48:	3304      	adds	r3, #4
 8003f4a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10a      	bne.n	8003f68 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	61fb      	str	r3, [r7, #28]
}
 8003f64:	bf00      	nop
 8003f66:	e7fe      	b.n	8003f66 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f6e:	6850      	ldr	r0, [r2, #4]
 8003f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f72:	6892      	ldr	r2, [r2, #8]
 8003f74:	4611      	mov	r1, r2
 8003f76:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f2c0 80aa 	blt.w	80040d4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d004      	beq.n	8003f96 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8e:	3304      	adds	r3, #4
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fe f9cb 	bl	800232c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f96:	463b      	mov	r3, r7
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff ff6b 	bl	8003e74 <prvSampleTimeNow>
 8003f9e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b09      	cmp	r3, #9
 8003fa4:	f200 8097 	bhi.w	80040d6 <prvProcessReceivedCommands+0x19e>
 8003fa8:	a201      	add	r2, pc, #4	; (adr r2, 8003fb0 <prvProcessReceivedCommands+0x78>)
 8003faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fae:	bf00      	nop
 8003fb0:	08003fd9 	.word	0x08003fd9
 8003fb4:	08003fd9 	.word	0x08003fd9
 8003fb8:	08003fd9 	.word	0x08003fd9
 8003fbc:	0800404d 	.word	0x0800404d
 8003fc0:	08004061 	.word	0x08004061
 8003fc4:	080040ab 	.word	0x080040ab
 8003fc8:	08003fd9 	.word	0x08003fd9
 8003fcc:	08003fd9 	.word	0x08003fd9
 8003fd0:	0800404d 	.word	0x0800404d
 8003fd4:	08004061 	.word	0x08004061
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fde:	f043 0301 	orr.w	r3, r3, #1
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	18d1      	adds	r1, r2, r3
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ff8:	f7ff ff5c 	bl	8003eb4 <prvInsertTimerInActiveList>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d069      	beq.n	80040d6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004008:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800400a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	d05e      	beq.n	80040d6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	441a      	add	r2, r3
 8004020:	2300      	movs	r3, #0
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	2300      	movs	r3, #0
 8004026:	2100      	movs	r1, #0
 8004028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800402a:	f7ff fe05 	bl	8003c38 <xTimerGenericCommand>
 800402e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d14f      	bne.n	80040d6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	61bb      	str	r3, [r7, #24]
}
 8004048:	bf00      	nop
 800404a:	e7fe      	b.n	800404a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800404c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004052:	f023 0301 	bic.w	r3, r3, #1
 8004056:	b2da      	uxtb	r2, r3
 8004058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800405e:	e03a      	b.n	80040d6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004062:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	b2da      	uxtb	r2, r3
 800406c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004076:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10a      	bne.n	8004096 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	617b      	str	r3, [r7, #20]
}
 8004092:	bf00      	nop
 8004094:	e7fe      	b.n	8004094 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004098:	699a      	ldr	r2, [r3, #24]
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	18d1      	adds	r1, r2, r3
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040a4:	f7ff ff06 	bl	8003eb4 <prvInsertTimerInActiveList>
					break;
 80040a8:	e015      	b.n	80040d6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80040aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d103      	bne.n	80040c0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80040b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040ba:	f000 fbe1 	bl	8004880 <vPortFree>
 80040be:	e00a      	b.n	80040d6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80040c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040c6:	f023 0301 	bic.w	r3, r3, #1
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80040d2:	e000      	b.n	80040d6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80040d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040d6:	4b08      	ldr	r3, [pc, #32]	; (80040f8 <prvProcessReceivedCommands+0x1c0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	1d39      	adds	r1, r7, #4
 80040dc:	2200      	movs	r2, #0
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fe fbec 	bl	80028bc <xQueueReceive>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f47f af2a 	bne.w	8003f40 <prvProcessReceivedCommands+0x8>
	}
}
 80040ec:	bf00      	nop
 80040ee:	bf00      	nop
 80040f0:	3730      	adds	r7, #48	; 0x30
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	20000b48 	.word	0x20000b48

080040fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004102:	e048      	b.n	8004196 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004104:	4b2d      	ldr	r3, [pc, #180]	; (80041bc <prvSwitchTimerLists+0xc0>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800410e:	4b2b      	ldr	r3, [pc, #172]	; (80041bc <prvSwitchTimerLists+0xc0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3304      	adds	r3, #4
 800411c:	4618      	mov	r0, r3
 800411e:	f7fe f905 	bl	800232c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d02e      	beq.n	8004196 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4413      	add	r3, r2
 8004140:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	429a      	cmp	r2, r3
 8004148:	d90e      	bls.n	8004168 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004156:	4b19      	ldr	r3, [pc, #100]	; (80041bc <prvSwitchTimerLists+0xc0>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	3304      	adds	r3, #4
 800415e:	4619      	mov	r1, r3
 8004160:	4610      	mov	r0, r2
 8004162:	f7fe f8aa 	bl	80022ba <vListInsert>
 8004166:	e016      	b.n	8004196 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004168:	2300      	movs	r3, #0
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	2300      	movs	r3, #0
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	2100      	movs	r1, #0
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f7ff fd60 	bl	8003c38 <xTimerGenericCommand>
 8004178:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10a      	bne.n	8004196 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004184:	f383 8811 	msr	BASEPRI, r3
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	603b      	str	r3, [r7, #0]
}
 8004192:	bf00      	nop
 8004194:	e7fe      	b.n	8004194 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004196:	4b09      	ldr	r3, [pc, #36]	; (80041bc <prvSwitchTimerLists+0xc0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1b1      	bne.n	8004104 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80041a0:	4b06      	ldr	r3, [pc, #24]	; (80041bc <prvSwitchTimerLists+0xc0>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80041a6:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <prvSwitchTimerLists+0xc4>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a04      	ldr	r2, [pc, #16]	; (80041bc <prvSwitchTimerLists+0xc0>)
 80041ac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80041ae:	4a04      	ldr	r2, [pc, #16]	; (80041c0 <prvSwitchTimerLists+0xc4>)
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	6013      	str	r3, [r2, #0]
}
 80041b4:	bf00      	nop
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	20000b40 	.word	0x20000b40
 80041c0:	20000b44 	.word	0x20000b44

080041c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80041ca:	f000 f96b 	bl	80044a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80041ce:	4b15      	ldr	r3, [pc, #84]	; (8004224 <prvCheckForValidListAndQueue+0x60>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d120      	bne.n	8004218 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80041d6:	4814      	ldr	r0, [pc, #80]	; (8004228 <prvCheckForValidListAndQueue+0x64>)
 80041d8:	f7fe f81e 	bl	8002218 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80041dc:	4813      	ldr	r0, [pc, #76]	; (800422c <prvCheckForValidListAndQueue+0x68>)
 80041de:	f7fe f81b 	bl	8002218 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80041e2:	4b13      	ldr	r3, [pc, #76]	; (8004230 <prvCheckForValidListAndQueue+0x6c>)
 80041e4:	4a10      	ldr	r2, [pc, #64]	; (8004228 <prvCheckForValidListAndQueue+0x64>)
 80041e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80041e8:	4b12      	ldr	r3, [pc, #72]	; (8004234 <prvCheckForValidListAndQueue+0x70>)
 80041ea:	4a10      	ldr	r2, [pc, #64]	; (800422c <prvCheckForValidListAndQueue+0x68>)
 80041ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80041ee:	2300      	movs	r3, #0
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	4b11      	ldr	r3, [pc, #68]	; (8004238 <prvCheckForValidListAndQueue+0x74>)
 80041f4:	4a11      	ldr	r2, [pc, #68]	; (800423c <prvCheckForValidListAndQueue+0x78>)
 80041f6:	2110      	movs	r1, #16
 80041f8:	200a      	movs	r0, #10
 80041fa:	f7fe f929 	bl	8002450 <xQueueGenericCreateStatic>
 80041fe:	4603      	mov	r3, r0
 8004200:	4a08      	ldr	r2, [pc, #32]	; (8004224 <prvCheckForValidListAndQueue+0x60>)
 8004202:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004204:	4b07      	ldr	r3, [pc, #28]	; (8004224 <prvCheckForValidListAndQueue+0x60>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800420c:	4b05      	ldr	r3, [pc, #20]	; (8004224 <prvCheckForValidListAndQueue+0x60>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	490b      	ldr	r1, [pc, #44]	; (8004240 <prvCheckForValidListAndQueue+0x7c>)
 8004212:	4618      	mov	r0, r3
 8004214:	f7fe fd42 	bl	8002c9c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004218:	f000 f974 	bl	8004504 <vPortExitCritical>
}
 800421c:	bf00      	nop
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	20000b48 	.word	0x20000b48
 8004228:	20000b18 	.word	0x20000b18
 800422c:	20000b2c 	.word	0x20000b2c
 8004230:	20000b40 	.word	0x20000b40
 8004234:	20000b44 	.word	0x20000b44
 8004238:	20000bf4 	.word	0x20000bf4
 800423c:	20000b54 	.word	0x20000b54
 8004240:	08004d20 	.word	0x08004d20

08004244 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3b04      	subs	r3, #4
 8004254:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800425c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	3b04      	subs	r3, #4
 8004262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f023 0201 	bic.w	r2, r3, #1
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3b04      	subs	r3, #4
 8004272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004274:	4a0c      	ldr	r2, [pc, #48]	; (80042a8 <pxPortInitialiseStack+0x64>)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3b14      	subs	r3, #20
 800427e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	3b04      	subs	r3, #4
 800428a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f06f 0202 	mvn.w	r2, #2
 8004292:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	3b20      	subs	r3, #32
 8004298:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800429a:	68fb      	ldr	r3, [r7, #12]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	080042ad 	.word	0x080042ad

080042ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80042b2:	2300      	movs	r3, #0
 80042b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80042b6:	4b12      	ldr	r3, [pc, #72]	; (8004300 <prvTaskExitError+0x54>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042be:	d00a      	beq.n	80042d6 <prvTaskExitError+0x2a>
	__asm volatile
 80042c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	60fb      	str	r3, [r7, #12]
}
 80042d2:	bf00      	nop
 80042d4:	e7fe      	b.n	80042d4 <prvTaskExitError+0x28>
	__asm volatile
 80042d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042da:	f383 8811 	msr	BASEPRI, r3
 80042de:	f3bf 8f6f 	isb	sy
 80042e2:	f3bf 8f4f 	dsb	sy
 80042e6:	60bb      	str	r3, [r7, #8]
}
 80042e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80042ea:	bf00      	nop
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0fc      	beq.n	80042ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80042f2:	bf00      	nop
 80042f4:	bf00      	nop
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	2000000c 	.word	0x2000000c
	...

08004310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004310:	4b07      	ldr	r3, [pc, #28]	; (8004330 <pxCurrentTCBConst2>)
 8004312:	6819      	ldr	r1, [r3, #0]
 8004314:	6808      	ldr	r0, [r1, #0]
 8004316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800431a:	f380 8809 	msr	PSP, r0
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f04f 0000 	mov.w	r0, #0
 8004326:	f380 8811 	msr	BASEPRI, r0
 800432a:	4770      	bx	lr
 800432c:	f3af 8000 	nop.w

08004330 <pxCurrentTCBConst2>:
 8004330:	20000618 	.word	0x20000618
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004334:	bf00      	nop
 8004336:	bf00      	nop

08004338 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004338:	4808      	ldr	r0, [pc, #32]	; (800435c <prvPortStartFirstTask+0x24>)
 800433a:	6800      	ldr	r0, [r0, #0]
 800433c:	6800      	ldr	r0, [r0, #0]
 800433e:	f380 8808 	msr	MSP, r0
 8004342:	f04f 0000 	mov.w	r0, #0
 8004346:	f380 8814 	msr	CONTROL, r0
 800434a:	b662      	cpsie	i
 800434c:	b661      	cpsie	f
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	df00      	svc	0
 8004358:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800435a:	bf00      	nop
 800435c:	e000ed08 	.word	0xe000ed08

08004360 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004366:	4b46      	ldr	r3, [pc, #280]	; (8004480 <xPortStartScheduler+0x120>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a46      	ldr	r2, [pc, #280]	; (8004484 <xPortStartScheduler+0x124>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d10a      	bne.n	8004386 <xPortStartScheduler+0x26>
	__asm volatile
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	613b      	str	r3, [r7, #16]
}
 8004382:	bf00      	nop
 8004384:	e7fe      	b.n	8004384 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004386:	4b3e      	ldr	r3, [pc, #248]	; (8004480 <xPortStartScheduler+0x120>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a3f      	ldr	r2, [pc, #252]	; (8004488 <xPortStartScheduler+0x128>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d10a      	bne.n	80043a6 <xPortStartScheduler+0x46>
	__asm volatile
 8004390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	60fb      	str	r3, [r7, #12]
}
 80043a2:	bf00      	nop
 80043a4:	e7fe      	b.n	80043a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043a6:	4b39      	ldr	r3, [pc, #228]	; (800448c <xPortStartScheduler+0x12c>)
 80043a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	22ff      	movs	r2, #255	; 0xff
 80043b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043c0:	78fb      	ldrb	r3, [r7, #3]
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	4b31      	ldr	r3, [pc, #196]	; (8004490 <xPortStartScheduler+0x130>)
 80043cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043ce:	4b31      	ldr	r3, [pc, #196]	; (8004494 <xPortStartScheduler+0x134>)
 80043d0:	2207      	movs	r2, #7
 80043d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043d4:	e009      	b.n	80043ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80043d6:	4b2f      	ldr	r3, [pc, #188]	; (8004494 <xPortStartScheduler+0x134>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3b01      	subs	r3, #1
 80043dc:	4a2d      	ldr	r2, [pc, #180]	; (8004494 <xPortStartScheduler+0x134>)
 80043de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043ea:	78fb      	ldrb	r3, [r7, #3]
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f2:	2b80      	cmp	r3, #128	; 0x80
 80043f4:	d0ef      	beq.n	80043d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043f6:	4b27      	ldr	r3, [pc, #156]	; (8004494 <xPortStartScheduler+0x134>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f1c3 0307 	rsb	r3, r3, #7
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d00a      	beq.n	8004418 <xPortStartScheduler+0xb8>
	__asm volatile
 8004402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	60bb      	str	r3, [r7, #8]
}
 8004414:	bf00      	nop
 8004416:	e7fe      	b.n	8004416 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004418:	4b1e      	ldr	r3, [pc, #120]	; (8004494 <xPortStartScheduler+0x134>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	021b      	lsls	r3, r3, #8
 800441e:	4a1d      	ldr	r2, [pc, #116]	; (8004494 <xPortStartScheduler+0x134>)
 8004420:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004422:	4b1c      	ldr	r3, [pc, #112]	; (8004494 <xPortStartScheduler+0x134>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800442a:	4a1a      	ldr	r2, [pc, #104]	; (8004494 <xPortStartScheduler+0x134>)
 800442c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	b2da      	uxtb	r2, r3
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004436:	4b18      	ldr	r3, [pc, #96]	; (8004498 <xPortStartScheduler+0x138>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a17      	ldr	r2, [pc, #92]	; (8004498 <xPortStartScheduler+0x138>)
 800443c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004440:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004442:	4b15      	ldr	r3, [pc, #84]	; (8004498 <xPortStartScheduler+0x138>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a14      	ldr	r2, [pc, #80]	; (8004498 <xPortStartScheduler+0x138>)
 8004448:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800444c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800444e:	f000 f8dd 	bl	800460c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004452:	4b12      	ldr	r3, [pc, #72]	; (800449c <xPortStartScheduler+0x13c>)
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004458:	f000 f8fc 	bl	8004654 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800445c:	4b10      	ldr	r3, [pc, #64]	; (80044a0 <xPortStartScheduler+0x140>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a0f      	ldr	r2, [pc, #60]	; (80044a0 <xPortStartScheduler+0x140>)
 8004462:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004466:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004468:	f7ff ff66 	bl	8004338 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800446c:	f7ff f846 	bl	80034fc <vTaskSwitchContext>
	prvTaskExitError();
 8004470:	f7ff ff1c 	bl	80042ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	e000ed00 	.word	0xe000ed00
 8004484:	410fc271 	.word	0x410fc271
 8004488:	410fc270 	.word	0x410fc270
 800448c:	e000e400 	.word	0xe000e400
 8004490:	20000c44 	.word	0x20000c44
 8004494:	20000c48 	.word	0x20000c48
 8004498:	e000ed20 	.word	0xe000ed20
 800449c:	2000000c 	.word	0x2000000c
 80044a0:	e000ef34 	.word	0xe000ef34

080044a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
	__asm volatile
 80044aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	607b      	str	r3, [r7, #4]
}
 80044bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80044be:	4b0f      	ldr	r3, [pc, #60]	; (80044fc <vPortEnterCritical+0x58>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3301      	adds	r3, #1
 80044c4:	4a0d      	ldr	r2, [pc, #52]	; (80044fc <vPortEnterCritical+0x58>)
 80044c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80044c8:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <vPortEnterCritical+0x58>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d10f      	bne.n	80044f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80044d0:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <vPortEnterCritical+0x5c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80044da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	603b      	str	r3, [r7, #0]
}
 80044ec:	bf00      	nop
 80044ee:	e7fe      	b.n	80044ee <vPortEnterCritical+0x4a>
	}
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	2000000c 	.word	0x2000000c
 8004500:	e000ed04 	.word	0xe000ed04

08004504 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800450a:	4b12      	ldr	r3, [pc, #72]	; (8004554 <vPortExitCritical+0x50>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10a      	bne.n	8004528 <vPortExitCritical+0x24>
	__asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	607b      	str	r3, [r7, #4]
}
 8004524:	bf00      	nop
 8004526:	e7fe      	b.n	8004526 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004528:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <vPortExitCritical+0x50>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3b01      	subs	r3, #1
 800452e:	4a09      	ldr	r2, [pc, #36]	; (8004554 <vPortExitCritical+0x50>)
 8004530:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004532:	4b08      	ldr	r3, [pc, #32]	; (8004554 <vPortExitCritical+0x50>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d105      	bne.n	8004546 <vPortExitCritical+0x42>
 800453a:	2300      	movs	r3, #0
 800453c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	f383 8811 	msr	BASEPRI, r3
}
 8004544:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	2000000c 	.word	0x2000000c
	...

08004560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004560:	f3ef 8009 	mrs	r0, PSP
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	4b15      	ldr	r3, [pc, #84]	; (80045c0 <pxCurrentTCBConst>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	f01e 0f10 	tst.w	lr, #16
 8004570:	bf08      	it	eq
 8004572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800457a:	6010      	str	r0, [r2, #0]
 800457c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004580:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004584:	f380 8811 	msr	BASEPRI, r0
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f7fe ffb4 	bl	80034fc <vTaskSwitchContext>
 8004594:	f04f 0000 	mov.w	r0, #0
 8004598:	f380 8811 	msr	BASEPRI, r0
 800459c:	bc09      	pop	{r0, r3}
 800459e:	6819      	ldr	r1, [r3, #0]
 80045a0:	6808      	ldr	r0, [r1, #0]
 80045a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a6:	f01e 0f10 	tst.w	lr, #16
 80045aa:	bf08      	it	eq
 80045ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80045b0:	f380 8809 	msr	PSP, r0
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	f3af 8000 	nop.w

080045c0 <pxCurrentTCBConst>:
 80045c0:	20000618 	.word	0x20000618
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80045c4:	bf00      	nop
 80045c6:	bf00      	nop

080045c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
	__asm volatile
 80045ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d2:	f383 8811 	msr	BASEPRI, r3
 80045d6:	f3bf 8f6f 	isb	sy
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	607b      	str	r3, [r7, #4]
}
 80045e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80045e2:	f7fe fed1 	bl	8003388 <xTaskIncrementTick>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045ec:	4b06      	ldr	r3, [pc, #24]	; (8004608 <xPortSysTickHandler+0x40>)
 80045ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	2300      	movs	r3, #0
 80045f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	f383 8811 	msr	BASEPRI, r3
}
 80045fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004600:	bf00      	nop
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	e000ed04 	.word	0xe000ed04

0800460c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004610:	4b0b      	ldr	r3, [pc, #44]	; (8004640 <vPortSetupTimerInterrupt+0x34>)
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004616:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <vPortSetupTimerInterrupt+0x38>)
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800461c:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <vPortSetupTimerInterrupt+0x3c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a0a      	ldr	r2, [pc, #40]	; (800464c <vPortSetupTimerInterrupt+0x40>)
 8004622:	fba2 2303 	umull	r2, r3, r2, r3
 8004626:	099b      	lsrs	r3, r3, #6
 8004628:	4a09      	ldr	r2, [pc, #36]	; (8004650 <vPortSetupTimerInterrupt+0x44>)
 800462a:	3b01      	subs	r3, #1
 800462c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800462e:	4b04      	ldr	r3, [pc, #16]	; (8004640 <vPortSetupTimerInterrupt+0x34>)
 8004630:	2207      	movs	r2, #7
 8004632:	601a      	str	r2, [r3, #0]
}
 8004634:	bf00      	nop
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	e000e010 	.word	0xe000e010
 8004644:	e000e018 	.word	0xe000e018
 8004648:	20000000 	.word	0x20000000
 800464c:	10624dd3 	.word	0x10624dd3
 8004650:	e000e014 	.word	0xe000e014

08004654 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004654:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004664 <vPortEnableVFP+0x10>
 8004658:	6801      	ldr	r1, [r0, #0]
 800465a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800465e:	6001      	str	r1, [r0, #0]
 8004660:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004662:	bf00      	nop
 8004664:	e000ed88 	.word	0xe000ed88

08004668 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800466e:	f3ef 8305 	mrs	r3, IPSR
 8004672:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2b0f      	cmp	r3, #15
 8004678:	d914      	bls.n	80046a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800467a:	4a17      	ldr	r2, [pc, #92]	; (80046d8 <vPortValidateInterruptPriority+0x70>)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004684:	4b15      	ldr	r3, [pc, #84]	; (80046dc <vPortValidateInterruptPriority+0x74>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	7afa      	ldrb	r2, [r7, #11]
 800468a:	429a      	cmp	r2, r3
 800468c:	d20a      	bcs.n	80046a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	607b      	str	r3, [r7, #4]
}
 80046a0:	bf00      	nop
 80046a2:	e7fe      	b.n	80046a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80046a4:	4b0e      	ldr	r3, [pc, #56]	; (80046e0 <vPortValidateInterruptPriority+0x78>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046ac:	4b0d      	ldr	r3, [pc, #52]	; (80046e4 <vPortValidateInterruptPriority+0x7c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d90a      	bls.n	80046ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	603b      	str	r3, [r7, #0]
}
 80046c6:	bf00      	nop
 80046c8:	e7fe      	b.n	80046c8 <vPortValidateInterruptPriority+0x60>
	}
 80046ca:	bf00      	nop
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	e000e3f0 	.word	0xe000e3f0
 80046dc:	20000c44 	.word	0x20000c44
 80046e0:	e000ed0c 	.word	0xe000ed0c
 80046e4:	20000c48 	.word	0x20000c48

080046e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b08a      	sub	sp, #40	; 0x28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80046f4:	f7fe fd8c 	bl	8003210 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80046f8:	4b5b      	ldr	r3, [pc, #364]	; (8004868 <pvPortMalloc+0x180>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004700:	f000 f920 	bl	8004944 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004704:	4b59      	ldr	r3, [pc, #356]	; (800486c <pvPortMalloc+0x184>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4013      	ands	r3, r2
 800470c:	2b00      	cmp	r3, #0
 800470e:	f040 8093 	bne.w	8004838 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d01d      	beq.n	8004754 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004718:	2208      	movs	r2, #8
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4413      	add	r3, r2
 800471e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f003 0307 	and.w	r3, r3, #7
 8004726:	2b00      	cmp	r3, #0
 8004728:	d014      	beq.n	8004754 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f023 0307 	bic.w	r3, r3, #7
 8004730:	3308      	adds	r3, #8
 8004732:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00a      	beq.n	8004754 <pvPortMalloc+0x6c>
	__asm volatile
 800473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	617b      	str	r3, [r7, #20]
}
 8004750:	bf00      	nop
 8004752:	e7fe      	b.n	8004752 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d06e      	beq.n	8004838 <pvPortMalloc+0x150>
 800475a:	4b45      	ldr	r3, [pc, #276]	; (8004870 <pvPortMalloc+0x188>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	429a      	cmp	r2, r3
 8004762:	d869      	bhi.n	8004838 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004764:	4b43      	ldr	r3, [pc, #268]	; (8004874 <pvPortMalloc+0x18c>)
 8004766:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004768:	4b42      	ldr	r3, [pc, #264]	; (8004874 <pvPortMalloc+0x18c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800476e:	e004      	b.n	800477a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	429a      	cmp	r2, r3
 8004782:	d903      	bls.n	800478c <pvPortMalloc+0xa4>
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1f1      	bne.n	8004770 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800478c:	4b36      	ldr	r3, [pc, #216]	; (8004868 <pvPortMalloc+0x180>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004792:	429a      	cmp	r2, r3
 8004794:	d050      	beq.n	8004838 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2208      	movs	r2, #8
 800479c:	4413      	add	r3, r2
 800479e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	1ad2      	subs	r2, r2, r3
 80047b0:	2308      	movs	r3, #8
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d91f      	bls.n	80047f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80047b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4413      	add	r3, r2
 80047be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <pvPortMalloc+0xf8>
	__asm volatile
 80047ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	613b      	str	r3, [r7, #16]
}
 80047dc:	bf00      	nop
 80047de:	e7fe      	b.n	80047de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	1ad2      	subs	r2, r2, r3
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80047f2:	69b8      	ldr	r0, [r7, #24]
 80047f4:	f000 f908 	bl	8004a08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047f8:	4b1d      	ldr	r3, [pc, #116]	; (8004870 <pvPortMalloc+0x188>)
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	4a1b      	ldr	r2, [pc, #108]	; (8004870 <pvPortMalloc+0x188>)
 8004804:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004806:	4b1a      	ldr	r3, [pc, #104]	; (8004870 <pvPortMalloc+0x188>)
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	4b1b      	ldr	r3, [pc, #108]	; (8004878 <pvPortMalloc+0x190>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d203      	bcs.n	800481a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004812:	4b17      	ldr	r3, [pc, #92]	; (8004870 <pvPortMalloc+0x188>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a18      	ldr	r2, [pc, #96]	; (8004878 <pvPortMalloc+0x190>)
 8004818:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	4b13      	ldr	r3, [pc, #76]	; (800486c <pvPortMalloc+0x184>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	431a      	orrs	r2, r3
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	2200      	movs	r2, #0
 800482c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800482e:	4b13      	ldr	r3, [pc, #76]	; (800487c <pvPortMalloc+0x194>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3301      	adds	r3, #1
 8004834:	4a11      	ldr	r2, [pc, #68]	; (800487c <pvPortMalloc+0x194>)
 8004836:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004838:	f7fe fcf8 	bl	800322c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <pvPortMalloc+0x174>
	__asm volatile
 8004846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	60fb      	str	r3, [r7, #12]
}
 8004858:	bf00      	nop
 800485a:	e7fe      	b.n	800485a <pvPortMalloc+0x172>
	return pvReturn;
 800485c:	69fb      	ldr	r3, [r7, #28]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3728      	adds	r7, #40	; 0x28
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	20004854 	.word	0x20004854
 800486c:	20004868 	.word	0x20004868
 8004870:	20004858 	.word	0x20004858
 8004874:	2000484c 	.word	0x2000484c
 8004878:	2000485c 	.word	0x2000485c
 800487c:	20004860 	.word	0x20004860

08004880 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d04d      	beq.n	800492e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004892:	2308      	movs	r3, #8
 8004894:	425b      	negs	r3, r3
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	4413      	add	r3, r2
 800489a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	4b24      	ldr	r3, [pc, #144]	; (8004938 <vPortFree+0xb8>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4013      	ands	r3, r2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10a      	bne.n	80048c4 <vPortFree+0x44>
	__asm volatile
 80048ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	60fb      	str	r3, [r7, #12]
}
 80048c0:	bf00      	nop
 80048c2:	e7fe      	b.n	80048c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <vPortFree+0x62>
	__asm volatile
 80048cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d0:	f383 8811 	msr	BASEPRI, r3
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	60bb      	str	r3, [r7, #8]
}
 80048de:	bf00      	nop
 80048e0:	e7fe      	b.n	80048e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	4b14      	ldr	r3, [pc, #80]	; (8004938 <vPortFree+0xb8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4013      	ands	r3, r2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d01e      	beq.n	800492e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d11a      	bne.n	800492e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	4b0e      	ldr	r3, [pc, #56]	; (8004938 <vPortFree+0xb8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	43db      	mvns	r3, r3
 8004902:	401a      	ands	r2, r3
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004908:	f7fe fc82 	bl	8003210 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	4b0a      	ldr	r3, [pc, #40]	; (800493c <vPortFree+0xbc>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4413      	add	r3, r2
 8004916:	4a09      	ldr	r2, [pc, #36]	; (800493c <vPortFree+0xbc>)
 8004918:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800491a:	6938      	ldr	r0, [r7, #16]
 800491c:	f000 f874 	bl	8004a08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004920:	4b07      	ldr	r3, [pc, #28]	; (8004940 <vPortFree+0xc0>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3301      	adds	r3, #1
 8004926:	4a06      	ldr	r2, [pc, #24]	; (8004940 <vPortFree+0xc0>)
 8004928:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800492a:	f7fe fc7f 	bl	800322c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800492e:	bf00      	nop
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	20004868 	.word	0x20004868
 800493c:	20004858 	.word	0x20004858
 8004940:	20004864 	.word	0x20004864

08004944 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800494a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800494e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004950:	4b27      	ldr	r3, [pc, #156]	; (80049f0 <prvHeapInit+0xac>)
 8004952:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00c      	beq.n	8004978 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	3307      	adds	r3, #7
 8004962:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f023 0307 	bic.w	r3, r3, #7
 800496a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	4a1f      	ldr	r2, [pc, #124]	; (80049f0 <prvHeapInit+0xac>)
 8004974:	4413      	add	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800497c:	4a1d      	ldr	r2, [pc, #116]	; (80049f4 <prvHeapInit+0xb0>)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004982:	4b1c      	ldr	r3, [pc, #112]	; (80049f4 <prvHeapInit+0xb0>)
 8004984:	2200      	movs	r2, #0
 8004986:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	4413      	add	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004990:	2208      	movs	r2, #8
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	1a9b      	subs	r3, r3, r2
 8004996:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0307 	bic.w	r3, r3, #7
 800499e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4a15      	ldr	r2, [pc, #84]	; (80049f8 <prvHeapInit+0xb4>)
 80049a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80049a6:	4b14      	ldr	r3, [pc, #80]	; (80049f8 <prvHeapInit+0xb4>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2200      	movs	r2, #0
 80049ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80049ae:	4b12      	ldr	r3, [pc, #72]	; (80049f8 <prvHeapInit+0xb4>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	1ad2      	subs	r2, r2, r3
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80049c4:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <prvHeapInit+0xb4>)
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	4a0a      	ldr	r2, [pc, #40]	; (80049fc <prvHeapInit+0xb8>)
 80049d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	4a09      	ldr	r2, [pc, #36]	; (8004a00 <prvHeapInit+0xbc>)
 80049da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80049dc:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <prvHeapInit+0xc0>)
 80049de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80049e2:	601a      	str	r2, [r3, #0]
}
 80049e4:	bf00      	nop
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	20000c4c 	.word	0x20000c4c
 80049f4:	2000484c 	.word	0x2000484c
 80049f8:	20004854 	.word	0x20004854
 80049fc:	2000485c 	.word	0x2000485c
 8004a00:	20004858 	.word	0x20004858
 8004a04:	20004868 	.word	0x20004868

08004a08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a10:	4b28      	ldr	r3, [pc, #160]	; (8004ab4 <prvInsertBlockIntoFreeList+0xac>)
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	e002      	b.n	8004a1c <prvInsertBlockIntoFreeList+0x14>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d8f7      	bhi.n	8004a16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	4413      	add	r3, r2
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d108      	bne.n	8004a4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	441a      	add	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	441a      	add	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d118      	bne.n	8004a90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	4b15      	ldr	r3, [pc, #84]	; (8004ab8 <prvInsertBlockIntoFreeList+0xb0>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d00d      	beq.n	8004a86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	441a      	add	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	e008      	b.n	8004a98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a86:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <prvInsertBlockIntoFreeList+0xb0>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	e003      	b.n	8004a98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d002      	beq.n	8004aa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004aa6:	bf00      	nop
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	2000484c 	.word	0x2000484c
 8004ab8:	20004854 	.word	0x20004854

08004abc <__libc_init_array>:
 8004abc:	b570      	push	{r4, r5, r6, lr}
 8004abe:	4d0d      	ldr	r5, [pc, #52]	; (8004af4 <__libc_init_array+0x38>)
 8004ac0:	4c0d      	ldr	r4, [pc, #52]	; (8004af8 <__libc_init_array+0x3c>)
 8004ac2:	1b64      	subs	r4, r4, r5
 8004ac4:	10a4      	asrs	r4, r4, #2
 8004ac6:	2600      	movs	r6, #0
 8004ac8:	42a6      	cmp	r6, r4
 8004aca:	d109      	bne.n	8004ae0 <__libc_init_array+0x24>
 8004acc:	4d0b      	ldr	r5, [pc, #44]	; (8004afc <__libc_init_array+0x40>)
 8004ace:	4c0c      	ldr	r4, [pc, #48]	; (8004b00 <__libc_init_array+0x44>)
 8004ad0:	f000 f8f2 	bl	8004cb8 <_init>
 8004ad4:	1b64      	subs	r4, r4, r5
 8004ad6:	10a4      	asrs	r4, r4, #2
 8004ad8:	2600      	movs	r6, #0
 8004ada:	42a6      	cmp	r6, r4
 8004adc:	d105      	bne.n	8004aea <__libc_init_array+0x2e>
 8004ade:	bd70      	pop	{r4, r5, r6, pc}
 8004ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae4:	4798      	blx	r3
 8004ae6:	3601      	adds	r6, #1
 8004ae8:	e7ee      	b.n	8004ac8 <__libc_init_array+0xc>
 8004aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aee:	4798      	blx	r3
 8004af0:	3601      	adds	r6, #1
 8004af2:	e7f2      	b.n	8004ada <__libc_init_array+0x1e>
 8004af4:	08004e5c 	.word	0x08004e5c
 8004af8:	08004e5c 	.word	0x08004e5c
 8004afc:	08004e5c 	.word	0x08004e5c
 8004b00:	08004e60 	.word	0x08004e60

08004b04 <__retarget_lock_acquire_recursive>:
 8004b04:	4770      	bx	lr

08004b06 <__retarget_lock_release_recursive>:
 8004b06:	4770      	bx	lr

08004b08 <memcpy>:
 8004b08:	440a      	add	r2, r1
 8004b0a:	4291      	cmp	r1, r2
 8004b0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004b10:	d100      	bne.n	8004b14 <memcpy+0xc>
 8004b12:	4770      	bx	lr
 8004b14:	b510      	push	{r4, lr}
 8004b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b1e:	4291      	cmp	r1, r2
 8004b20:	d1f9      	bne.n	8004b16 <memcpy+0xe>
 8004b22:	bd10      	pop	{r4, pc}

08004b24 <memset>:
 8004b24:	4402      	add	r2, r0
 8004b26:	4603      	mov	r3, r0
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d100      	bne.n	8004b2e <memset+0xa>
 8004b2c:	4770      	bx	lr
 8004b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b32:	e7f9      	b.n	8004b28 <memset+0x4>

08004b34 <cleanup_glue>:
 8004b34:	b538      	push	{r3, r4, r5, lr}
 8004b36:	460c      	mov	r4, r1
 8004b38:	6809      	ldr	r1, [r1, #0]
 8004b3a:	4605      	mov	r5, r0
 8004b3c:	b109      	cbz	r1, 8004b42 <cleanup_glue+0xe>
 8004b3e:	f7ff fff9 	bl	8004b34 <cleanup_glue>
 8004b42:	4621      	mov	r1, r4
 8004b44:	4628      	mov	r0, r5
 8004b46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b4a:	f000 b869 	b.w	8004c20 <_free_r>
	...

08004b50 <_reclaim_reent>:
 8004b50:	4b2c      	ldr	r3, [pc, #176]	; (8004c04 <_reclaim_reent+0xb4>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4283      	cmp	r3, r0
 8004b56:	b570      	push	{r4, r5, r6, lr}
 8004b58:	4604      	mov	r4, r0
 8004b5a:	d051      	beq.n	8004c00 <_reclaim_reent+0xb0>
 8004b5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004b5e:	b143      	cbz	r3, 8004b72 <_reclaim_reent+0x22>
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d14a      	bne.n	8004bfc <_reclaim_reent+0xac>
 8004b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b68:	6819      	ldr	r1, [r3, #0]
 8004b6a:	b111      	cbz	r1, 8004b72 <_reclaim_reent+0x22>
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	f000 f857 	bl	8004c20 <_free_r>
 8004b72:	6961      	ldr	r1, [r4, #20]
 8004b74:	b111      	cbz	r1, 8004b7c <_reclaim_reent+0x2c>
 8004b76:	4620      	mov	r0, r4
 8004b78:	f000 f852 	bl	8004c20 <_free_r>
 8004b7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004b7e:	b111      	cbz	r1, 8004b86 <_reclaim_reent+0x36>
 8004b80:	4620      	mov	r0, r4
 8004b82:	f000 f84d 	bl	8004c20 <_free_r>
 8004b86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004b88:	b111      	cbz	r1, 8004b90 <_reclaim_reent+0x40>
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	f000 f848 	bl	8004c20 <_free_r>
 8004b90:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004b92:	b111      	cbz	r1, 8004b9a <_reclaim_reent+0x4a>
 8004b94:	4620      	mov	r0, r4
 8004b96:	f000 f843 	bl	8004c20 <_free_r>
 8004b9a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004b9c:	b111      	cbz	r1, 8004ba4 <_reclaim_reent+0x54>
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	f000 f83e 	bl	8004c20 <_free_r>
 8004ba4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004ba6:	b111      	cbz	r1, 8004bae <_reclaim_reent+0x5e>
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f000 f839 	bl	8004c20 <_free_r>
 8004bae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004bb0:	b111      	cbz	r1, 8004bb8 <_reclaim_reent+0x68>
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	f000 f834 	bl	8004c20 <_free_r>
 8004bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bba:	b111      	cbz	r1, 8004bc2 <_reclaim_reent+0x72>
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	f000 f82f 	bl	8004c20 <_free_r>
 8004bc2:	69a3      	ldr	r3, [r4, #24]
 8004bc4:	b1e3      	cbz	r3, 8004c00 <_reclaim_reent+0xb0>
 8004bc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004bc8:	4620      	mov	r0, r4
 8004bca:	4798      	blx	r3
 8004bcc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004bce:	b1b9      	cbz	r1, 8004c00 <_reclaim_reent+0xb0>
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004bd6:	f7ff bfad 	b.w	8004b34 <cleanup_glue>
 8004bda:	5949      	ldr	r1, [r1, r5]
 8004bdc:	b941      	cbnz	r1, 8004bf0 <_reclaim_reent+0xa0>
 8004bde:	3504      	adds	r5, #4
 8004be0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004be2:	2d80      	cmp	r5, #128	; 0x80
 8004be4:	68d9      	ldr	r1, [r3, #12]
 8004be6:	d1f8      	bne.n	8004bda <_reclaim_reent+0x8a>
 8004be8:	4620      	mov	r0, r4
 8004bea:	f000 f819 	bl	8004c20 <_free_r>
 8004bee:	e7ba      	b.n	8004b66 <_reclaim_reent+0x16>
 8004bf0:	680e      	ldr	r6, [r1, #0]
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f000 f814 	bl	8004c20 <_free_r>
 8004bf8:	4631      	mov	r1, r6
 8004bfa:	e7ef      	b.n	8004bdc <_reclaim_reent+0x8c>
 8004bfc:	2500      	movs	r5, #0
 8004bfe:	e7ef      	b.n	8004be0 <_reclaim_reent+0x90>
 8004c00:	bd70      	pop	{r4, r5, r6, pc}
 8004c02:	bf00      	nop
 8004c04:	20000010 	.word	0x20000010

08004c08 <__malloc_lock>:
 8004c08:	4801      	ldr	r0, [pc, #4]	; (8004c10 <__malloc_lock+0x8>)
 8004c0a:	f7ff bf7b 	b.w	8004b04 <__retarget_lock_acquire_recursive>
 8004c0e:	bf00      	nop
 8004c10:	2000486c 	.word	0x2000486c

08004c14 <__malloc_unlock>:
 8004c14:	4801      	ldr	r0, [pc, #4]	; (8004c1c <__malloc_unlock+0x8>)
 8004c16:	f7ff bf76 	b.w	8004b06 <__retarget_lock_release_recursive>
 8004c1a:	bf00      	nop
 8004c1c:	2000486c 	.word	0x2000486c

08004c20 <_free_r>:
 8004c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c22:	2900      	cmp	r1, #0
 8004c24:	d044      	beq.n	8004cb0 <_free_r+0x90>
 8004c26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c2a:	9001      	str	r0, [sp, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f1a1 0404 	sub.w	r4, r1, #4
 8004c32:	bfb8      	it	lt
 8004c34:	18e4      	addlt	r4, r4, r3
 8004c36:	f7ff ffe7 	bl	8004c08 <__malloc_lock>
 8004c3a:	4a1e      	ldr	r2, [pc, #120]	; (8004cb4 <_free_r+0x94>)
 8004c3c:	9801      	ldr	r0, [sp, #4]
 8004c3e:	6813      	ldr	r3, [r2, #0]
 8004c40:	b933      	cbnz	r3, 8004c50 <_free_r+0x30>
 8004c42:	6063      	str	r3, [r4, #4]
 8004c44:	6014      	str	r4, [r2, #0]
 8004c46:	b003      	add	sp, #12
 8004c48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c4c:	f7ff bfe2 	b.w	8004c14 <__malloc_unlock>
 8004c50:	42a3      	cmp	r3, r4
 8004c52:	d908      	bls.n	8004c66 <_free_r+0x46>
 8004c54:	6825      	ldr	r5, [r4, #0]
 8004c56:	1961      	adds	r1, r4, r5
 8004c58:	428b      	cmp	r3, r1
 8004c5a:	bf01      	itttt	eq
 8004c5c:	6819      	ldreq	r1, [r3, #0]
 8004c5e:	685b      	ldreq	r3, [r3, #4]
 8004c60:	1949      	addeq	r1, r1, r5
 8004c62:	6021      	streq	r1, [r4, #0]
 8004c64:	e7ed      	b.n	8004c42 <_free_r+0x22>
 8004c66:	461a      	mov	r2, r3
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	b10b      	cbz	r3, 8004c70 <_free_r+0x50>
 8004c6c:	42a3      	cmp	r3, r4
 8004c6e:	d9fa      	bls.n	8004c66 <_free_r+0x46>
 8004c70:	6811      	ldr	r1, [r2, #0]
 8004c72:	1855      	adds	r5, r2, r1
 8004c74:	42a5      	cmp	r5, r4
 8004c76:	d10b      	bne.n	8004c90 <_free_r+0x70>
 8004c78:	6824      	ldr	r4, [r4, #0]
 8004c7a:	4421      	add	r1, r4
 8004c7c:	1854      	adds	r4, r2, r1
 8004c7e:	42a3      	cmp	r3, r4
 8004c80:	6011      	str	r1, [r2, #0]
 8004c82:	d1e0      	bne.n	8004c46 <_free_r+0x26>
 8004c84:	681c      	ldr	r4, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	6053      	str	r3, [r2, #4]
 8004c8a:	4421      	add	r1, r4
 8004c8c:	6011      	str	r1, [r2, #0]
 8004c8e:	e7da      	b.n	8004c46 <_free_r+0x26>
 8004c90:	d902      	bls.n	8004c98 <_free_r+0x78>
 8004c92:	230c      	movs	r3, #12
 8004c94:	6003      	str	r3, [r0, #0]
 8004c96:	e7d6      	b.n	8004c46 <_free_r+0x26>
 8004c98:	6825      	ldr	r5, [r4, #0]
 8004c9a:	1961      	adds	r1, r4, r5
 8004c9c:	428b      	cmp	r3, r1
 8004c9e:	bf04      	itt	eq
 8004ca0:	6819      	ldreq	r1, [r3, #0]
 8004ca2:	685b      	ldreq	r3, [r3, #4]
 8004ca4:	6063      	str	r3, [r4, #4]
 8004ca6:	bf04      	itt	eq
 8004ca8:	1949      	addeq	r1, r1, r5
 8004caa:	6021      	streq	r1, [r4, #0]
 8004cac:	6054      	str	r4, [r2, #4]
 8004cae:	e7ca      	b.n	8004c46 <_free_r+0x26>
 8004cb0:	b003      	add	sp, #12
 8004cb2:	bd30      	pop	{r4, r5, pc}
 8004cb4:	20004870 	.word	0x20004870

08004cb8 <_init>:
 8004cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cba:	bf00      	nop
 8004cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cbe:	bc08      	pop	{r3}
 8004cc0:	469e      	mov	lr, r3
 8004cc2:	4770      	bx	lr

08004cc4 <_fini>:
 8004cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc6:	bf00      	nop
 8004cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cca:	bc08      	pop	{r3}
 8004ccc:	469e      	mov	lr, r3
 8004cce:	4770      	bx	lr
